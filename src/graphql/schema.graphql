# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Ability {
  _count: AbilityCount
  description: String!
  id: ID!
  max: Int!
  min: Int!
  name: String!
  playersAbilities(cursor: PlayersAbilitiesWhereUniqueInput, distinct: [PlayersAbilitiesScalarFieldEnum!], orderBy: [PlayersAbilitiesOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersAbilitiesWhereInput): [PlayersAbilities!]!
}

type AbilityAvgAggregate {
  id: Float
  max: Float
  min: Float
}

input AbilityAvgOrderByAggregateInput {
  id: SortOrder
  max: SortOrder
  min: SortOrder
}

type AbilityCount {
  playersAbilities(where: PlayersAbilitiesWhereInput): Int!
}

type AbilityCountAggregate {
  _all: Int!
  description: Int!
  id: Int!
  max: Int!
  min: Int!
  name: Int!
}

input AbilityCountOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  max: SortOrder
  min: SortOrder
  name: SortOrder
}

type AbilityGroupBy {
  _avg: AbilityAvgAggregate
  _count: AbilityCountAggregate
  _max: AbilityMaxAggregate
  _min: AbilityMinAggregate
  _sum: AbilitySumAggregate
  description: String!
  id: Int!
  max: Int!
  min: Int!
  name: String!
}

type AbilityMaxAggregate {
  description: String
  id: Int
  max: Int
  min: Int
  name: String
}

input AbilityMaxOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  max: SortOrder
  min: SortOrder
  name: SortOrder
}

type AbilityMinAggregate {
  description: String
  id: Int
  max: Int
  min: Int
  name: String
}

input AbilityMinOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  max: SortOrder
  min: SortOrder
  name: SortOrder
}

input AbilityOrderByWithAggregationInput {
  _avg: AbilityAvgOrderByAggregateInput
  _count: AbilityCountOrderByAggregateInput
  _max: AbilityMaxOrderByAggregateInput
  _min: AbilityMinOrderByAggregateInput
  _sum: AbilitySumOrderByAggregateInput
  description: SortOrder
  id: SortOrder
  max: SortOrder
  min: SortOrder
  name: SortOrder
}

input AbilityOrderByWithRelationInput {
  description: SortOrder
  id: SortOrder
  max: SortOrder
  min: SortOrder
  name: SortOrder
  playersAbilities: PlayersAbilitiesOrderByRelationAggregateInput
}

input AbilityRelationFilter {
  is: AbilityWhereInput
  isNot: AbilityWhereInput
}

enum AbilityScalarFieldEnum {
  description
  id
  max
  min
  name
}

input AbilityScalarWhereWithAggregatesInput {
  AND: [AbilityScalarWhereWithAggregatesInput!]
  NOT: [AbilityScalarWhereWithAggregatesInput!]
  OR: [AbilityScalarWhereWithAggregatesInput!]
  description: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  max: IntWithAggregatesFilter
  min: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
}

type AbilitySumAggregate {
  id: Int
  max: Int
  min: Int
}

input AbilitySumOrderByAggregateInput {
  id: SortOrder
  max: SortOrder
  min: SortOrder
}

input AbilityWhereInput {
  AND: [AbilityWhereInput!]
  NOT: [AbilityWhereInput!]
  OR: [AbilityWhereInput!]
  description: StringFilter
  id: IntFilter
  max: IntFilter
  min: IntFilter
  name: StringFilter
  playersAbilities: PlayersAbilitiesListRelationFilter
}

input AbilityWhereUniqueInput {
  AND: [AbilityWhereInput!]
  NOT: [AbilityWhereInput!]
  OR: [AbilityWhereInput!]
  description: StringFilter
  id: Int
  max: IntFilter
  min: IntFilter
  name: StringFilter
  playersAbilities: PlayersAbilitiesListRelationFilter
}

type AggregateAbility {
  _avg: AbilityAvgAggregate
  _count: AbilityCountAggregate
  _max: AbilityMaxAggregate
  _min: AbilityMinAggregate
  _sum: AbilitySumAggregate
}

type AggregateAppearance {
  _avg: AppearanceAvgAggregate
  _count: AppearanceCountAggregate
  _max: AppearanceMaxAggregate
  _min: AppearanceMinAggregate
  _sum: AppearanceSumAggregate
}

type AggregateAppearanceValue {
  _avg: AppearanceValueAvgAggregate
  _count: AppearanceValueCountAggregate
  _max: AppearanceValueMaxAggregate
  _min: AppearanceValueMinAggregate
  _sum: AppearanceValueSumAggregate
}

type AggregateFormation {
  _avg: FormationAvgAggregate
  _count: FormationCountAggregate
  _max: FormationMaxAggregate
  _min: FormationMinAggregate
  _sum: FormationSumAggregate
}

type AggregateLeague {
  _avg: LeagueAvgAggregate
  _count: LeagueCountAggregate
  _max: LeagueMaxAggregate
  _min: LeagueMinAggregate
  _sum: LeagueSumAggregate
}

type AggregateLeagueCategory {
  _avg: LeagueCategoryAvgAggregate
  _count: LeagueCategoryCountAggregate
  _max: LeagueCategoryMaxAggregate
  _min: LeagueCategoryMinAggregate
  _sum: LeagueCategorySumAggregate
}

type AggregateNationality {
  _avg: NationalityAvgAggregate
  _count: NationalityCountAggregate
  _max: NationalityMaxAggregate
  _min: NationalityMinAggregate
  _sum: NationalitySumAggregate
}

type AggregatePlayer {
  _avg: PlayerAvgAggregate
  _count: PlayerCountAggregate
  _max: PlayerMaxAggregate
  _min: PlayerMinAggregate
  _sum: PlayerSumAggregate
}

type AggregatePlayersAbilities {
  _avg: PlayersAbilitiesAvgAggregate
  _count: PlayersAbilitiesCountAggregate
  _max: PlayersAbilitiesMaxAggregate
  _min: PlayersAbilitiesMinAggregate
  _sum: PlayersAbilitiesSumAggregate
}

type AggregatePlayersAppearances {
  _avg: PlayersAppearancesAvgAggregate
  _count: PlayersAppearancesCountAggregate
  _max: PlayersAppearancesMaxAggregate
  _min: PlayersAppearancesMinAggregate
  _sum: PlayersAppearancesSumAggregate
}

type AggregatePlayersPositions {
  _avg: PlayersPositionsAvgAggregate
  _count: PlayersPositionsCountAggregate
  _max: PlayersPositionsMaxAggregate
  _min: PlayersPositionsMinAggregate
  _sum: PlayersPositionsSumAggregate
}

type AggregatePlayersSettings {
  _avg: PlayersSettingsAvgAggregate
  _count: PlayersSettingsCountAggregate
  _max: PlayersSettingsMaxAggregate
  _min: PlayersSettingsMinAggregate
  _sum: PlayersSettingsSumAggregate
}

type AggregatePlayersSpecialAbilities {
  _avg: PlayersSpecialAbilitiesAvgAggregate
  _count: PlayersSpecialAbilitiesCountAggregate
  _max: PlayersSpecialAbilitiesMaxAggregate
  _min: PlayersSpecialAbilitiesMinAggregate
  _sum: PlayersSpecialAbilitiesSumAggregate
}

type AggregatePlayersTeams {
  _avg: PlayersTeamsAvgAggregate
  _count: PlayersTeamsCountAggregate
  _max: PlayersTeamsMaxAggregate
  _min: PlayersTeamsMinAggregate
  _sum: PlayersTeamsSumAggregate
}

type AggregatePosition {
  _avg: PositionAvgAggregate
  _count: PositionCountAggregate
  _max: PositionMaxAggregate
  _min: PositionMinAggregate
  _sum: PositionSumAggregate
}

type AggregatePositionCategory {
  _avg: PositionCategoryAvgAggregate
  _count: PositionCategoryCountAggregate
  _max: PositionCategoryMaxAggregate
  _min: PositionCategoryMinAggregate
  _sum: PositionCategorySumAggregate
}

type AggregateSetting {
  _avg: SettingAvgAggregate
  _count: SettingCountAggregate
  _max: SettingMaxAggregate
  _min: SettingMinAggregate
  _sum: SettingSumAggregate
}

type AggregateSettingValue {
  _avg: SettingValueAvgAggregate
  _count: SettingValueCountAggregate
  _max: SettingValueMaxAggregate
  _min: SettingValueMinAggregate
  _sum: SettingValueSumAggregate
}

type AggregateSpecialAbility {
  _avg: SpecialAbilityAvgAggregate
  _count: SpecialAbilityCountAggregate
  _max: SpecialAbilityMaxAggregate
  _min: SpecialAbilityMinAggregate
  _sum: SpecialAbilitySumAggregate
}

type AggregateStadium {
  _avg: StadiumAvgAggregate
  _count: StadiumCountAggregate
  _max: StadiumMaxAggregate
  _min: StadiumMinAggregate
  _sum: StadiumSumAggregate
}

type AggregateStadiumArea {
  _avg: StadiumAreaAvgAggregate
  _count: StadiumAreaCountAggregate
  _max: StadiumAreaMaxAggregate
  _min: StadiumAreaMinAggregate
  _sum: StadiumAreaSumAggregate
}

type AggregateTeam {
  _avg: TeamAvgAggregate
  _count: TeamCountAggregate
  _max: TeamMaxAggregate
  _min: TeamMinAggregate
  _sum: TeamSumAggregate
}

type Appearance {
  _count: AppearanceCount
  id: ID!
  max: Int
  min: Int
  name: String!
  playersAppearances(cursor: PlayersAppearancesWhereUniqueInput, distinct: [PlayersAppearancesScalarFieldEnum!], orderBy: [PlayersAppearancesOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersAppearancesWhereInput): [PlayersAppearances!]!
  required: Boolean!
  values(cursor: AppearanceValueWhereUniqueInput, distinct: [AppearanceValueScalarFieldEnum!], orderBy: [AppearanceValueOrderByWithRelationInput!], skip: Int, take: Int, where: AppearanceValueWhereInput): [AppearanceValue!]!
}

type AppearanceAvgAggregate {
  id: Float
  max: Float
  min: Float
}

input AppearanceAvgOrderByAggregateInput {
  id: SortOrder
  max: SortOrder
  min: SortOrder
}

type AppearanceCount {
  playersAppearances(where: PlayersAppearancesWhereInput): Int!
  values(where: AppearanceValueWhereInput): Int!
}

type AppearanceCountAggregate {
  _all: Int!
  id: Int!
  max: Int!
  min: Int!
  name: Int!
  required: Int!
}

input AppearanceCountOrderByAggregateInput {
  id: SortOrder
  max: SortOrder
  min: SortOrder
  name: SortOrder
  required: SortOrder
}

type AppearanceGroupBy {
  _avg: AppearanceAvgAggregate
  _count: AppearanceCountAggregate
  _max: AppearanceMaxAggregate
  _min: AppearanceMinAggregate
  _sum: AppearanceSumAggregate
  id: Int!
  max: Int
  min: Int
  name: String!
  required: Boolean!
}

type AppearanceMaxAggregate {
  id: Int
  max: Int
  min: Int
  name: String
  required: Boolean
}

input AppearanceMaxOrderByAggregateInput {
  id: SortOrder
  max: SortOrder
  min: SortOrder
  name: SortOrder
  required: SortOrder
}

type AppearanceMinAggregate {
  id: Int
  max: Int
  min: Int
  name: String
  required: Boolean
}

input AppearanceMinOrderByAggregateInput {
  id: SortOrder
  max: SortOrder
  min: SortOrder
  name: SortOrder
  required: SortOrder
}

input AppearanceOrderByWithAggregationInput {
  _avg: AppearanceAvgOrderByAggregateInput
  _count: AppearanceCountOrderByAggregateInput
  _max: AppearanceMaxOrderByAggregateInput
  _min: AppearanceMinOrderByAggregateInput
  _sum: AppearanceSumOrderByAggregateInput
  id: SortOrder
  max: SortOrderInput
  min: SortOrderInput
  name: SortOrder
  required: SortOrder
}

input AppearanceOrderByWithRelationInput {
  id: SortOrder
  max: SortOrderInput
  min: SortOrderInput
  name: SortOrder
  playersAppearances: PlayersAppearancesOrderByRelationAggregateInput
  required: SortOrder
  values: AppearanceValueOrderByRelationAggregateInput
}

input AppearanceRelationFilter {
  is: AppearanceWhereInput
  isNot: AppearanceWhereInput
}

enum AppearanceScalarFieldEnum {
  id
  max
  min
  name
  required
}

input AppearanceScalarWhereWithAggregatesInput {
  AND: [AppearanceScalarWhereWithAggregatesInput!]
  NOT: [AppearanceScalarWhereWithAggregatesInput!]
  OR: [AppearanceScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  max: IntNullableWithAggregatesFilter
  min: IntNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
  required: BoolWithAggregatesFilter
}

type AppearanceSumAggregate {
  id: Int
  max: Int
  min: Int
}

input AppearanceSumOrderByAggregateInput {
  id: SortOrder
  max: SortOrder
  min: SortOrder
}

type AppearanceValue {
  _count: AppearanceValueCount
  appearance: Appearance!
  appearanceId: Int!
  id: ID!
  playersAppearances(cursor: PlayersAppearancesWhereUniqueInput, distinct: [PlayersAppearancesScalarFieldEnum!], orderBy: [PlayersAppearancesOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersAppearancesWhereInput): [PlayersAppearances!]!
  value: String!
}

type AppearanceValueAvgAggregate {
  appearanceId: Float
  id: Float
}

input AppearanceValueAvgOrderByAggregateInput {
  appearanceId: SortOrder
  id: SortOrder
}

type AppearanceValueCount {
  playersAppearances(where: PlayersAppearancesWhereInput): Int!
}

type AppearanceValueCountAggregate {
  _all: Int!
  appearanceId: Int!
  id: Int!
  value: Int!
}

input AppearanceValueCountOrderByAggregateInput {
  appearanceId: SortOrder
  id: SortOrder
  value: SortOrder
}

type AppearanceValueGroupBy {
  _avg: AppearanceValueAvgAggregate
  _count: AppearanceValueCountAggregate
  _max: AppearanceValueMaxAggregate
  _min: AppearanceValueMinAggregate
  _sum: AppearanceValueSumAggregate
  appearanceId: Int!
  id: Int!
  value: String!
}

input AppearanceValueListRelationFilter {
  every: AppearanceValueWhereInput
  none: AppearanceValueWhereInput
  some: AppearanceValueWhereInput
}

type AppearanceValueMaxAggregate {
  appearanceId: Int
  id: Int
  value: String
}

input AppearanceValueMaxOrderByAggregateInput {
  appearanceId: SortOrder
  id: SortOrder
  value: SortOrder
}

type AppearanceValueMinAggregate {
  appearanceId: Int
  id: Int
  value: String
}

input AppearanceValueMinOrderByAggregateInput {
  appearanceId: SortOrder
  id: SortOrder
  value: SortOrder
}

input AppearanceValueNullableRelationFilter {
  is: AppearanceValueWhereInput
  isNot: AppearanceValueWhereInput
}

input AppearanceValueOrderByRelationAggregateInput {
  _count: SortOrder
}

input AppearanceValueOrderByWithAggregationInput {
  _avg: AppearanceValueAvgOrderByAggregateInput
  _count: AppearanceValueCountOrderByAggregateInput
  _max: AppearanceValueMaxOrderByAggregateInput
  _min: AppearanceValueMinOrderByAggregateInput
  _sum: AppearanceValueSumOrderByAggregateInput
  appearanceId: SortOrder
  id: SortOrder
  value: SortOrder
}

input AppearanceValueOrderByWithRelationInput {
  appearance: AppearanceOrderByWithRelationInput
  appearanceId: SortOrder
  id: SortOrder
  playersAppearances: PlayersAppearancesOrderByRelationAggregateInput
  value: SortOrder
}

enum AppearanceValueScalarFieldEnum {
  appearanceId
  id
  value
}

input AppearanceValueScalarWhereWithAggregatesInput {
  AND: [AppearanceValueScalarWhereWithAggregatesInput!]
  NOT: [AppearanceValueScalarWhereWithAggregatesInput!]
  OR: [AppearanceValueScalarWhereWithAggregatesInput!]
  appearanceId: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
  value: StringWithAggregatesFilter
}

type AppearanceValueSumAggregate {
  appearanceId: Int
  id: Int
}

input AppearanceValueSumOrderByAggregateInput {
  appearanceId: SortOrder
  id: SortOrder
}

input AppearanceValueWhereInput {
  AND: [AppearanceValueWhereInput!]
  NOT: [AppearanceValueWhereInput!]
  OR: [AppearanceValueWhereInput!]
  appearance: AppearanceRelationFilter
  appearanceId: IntFilter
  id: IntFilter
  playersAppearances: PlayersAppearancesListRelationFilter
  value: StringFilter
}

input AppearanceValueWhereUniqueInput {
  AND: [AppearanceValueWhereInput!]
  NOT: [AppearanceValueWhereInput!]
  OR: [AppearanceValueWhereInput!]
  appearance: AppearanceRelationFilter
  appearanceId: IntFilter
  id: Int
  playersAppearances: PlayersAppearancesListRelationFilter
  value: StringFilter
}

input AppearanceWhereInput {
  AND: [AppearanceWhereInput!]
  NOT: [AppearanceWhereInput!]
  OR: [AppearanceWhereInput!]
  id: IntFilter
  max: IntNullableFilter
  min: IntNullableFilter
  name: StringFilter
  playersAppearances: PlayersAppearancesListRelationFilter
  required: BoolFilter
  values: AppearanceValueListRelationFilter
}

input AppearanceWhereUniqueInput {
  AND: [AppearanceWhereInput!]
  NOT: [AppearanceWhereInput!]
  OR: [AppearanceWhereInput!]
  id: Int
  max: IntNullableFilter
  min: IntNullableFilter
  name: StringFilter
  playersAppearances: PlayersAppearancesListRelationFilter
  required: BoolFilter
  values: AppearanceValueListRelationFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input DateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

type Formation {
  _count: FormationCount
  defenders: Int!
  forwards: Int!
  id: ID!
  midfielders: Int!
  name: String!
  teams(cursor: TeamWhereUniqueInput, distinct: [TeamScalarFieldEnum!], orderBy: [TeamOrderByWithRelationInput!], skip: Int, take: Int, where: TeamWhereInput): [Team!]!
}

type FormationAvgAggregate {
  defenders: Float
  forwards: Float
  id: Float
  midfielders: Float
}

input FormationAvgOrderByAggregateInput {
  defenders: SortOrder
  forwards: SortOrder
  id: SortOrder
  midfielders: SortOrder
}

type FormationCount {
  teams(where: TeamWhereInput): Int!
}

type FormationCountAggregate {
  _all: Int!
  defenders: Int!
  forwards: Int!
  id: Int!
  midfielders: Int!
  name: Int!
}

input FormationCountOrderByAggregateInput {
  defenders: SortOrder
  forwards: SortOrder
  id: SortOrder
  midfielders: SortOrder
  name: SortOrder
}

type FormationGroupBy {
  _avg: FormationAvgAggregate
  _count: FormationCountAggregate
  _max: FormationMaxAggregate
  _min: FormationMinAggregate
  _sum: FormationSumAggregate
  defenders: Int!
  forwards: Int!
  id: Int!
  midfielders: Int!
  name: String!
}

type FormationMaxAggregate {
  defenders: Int
  forwards: Int
  id: Int
  midfielders: Int
  name: String
}

input FormationMaxOrderByAggregateInput {
  defenders: SortOrder
  forwards: SortOrder
  id: SortOrder
  midfielders: SortOrder
  name: SortOrder
}

type FormationMinAggregate {
  defenders: Int
  forwards: Int
  id: Int
  midfielders: Int
  name: String
}

input FormationMinOrderByAggregateInput {
  defenders: SortOrder
  forwards: SortOrder
  id: SortOrder
  midfielders: SortOrder
  name: SortOrder
}

input FormationOrderByWithAggregationInput {
  _avg: FormationAvgOrderByAggregateInput
  _count: FormationCountOrderByAggregateInput
  _max: FormationMaxOrderByAggregateInput
  _min: FormationMinOrderByAggregateInput
  _sum: FormationSumOrderByAggregateInput
  defenders: SortOrder
  forwards: SortOrder
  id: SortOrder
  midfielders: SortOrder
  name: SortOrder
}

input FormationOrderByWithRelationInput {
  defenders: SortOrder
  forwards: SortOrder
  id: SortOrder
  midfielders: SortOrder
  name: SortOrder
  teams: TeamOrderByRelationAggregateInput
}

input FormationRelationFilter {
  is: FormationWhereInput
  isNot: FormationWhereInput
}

enum FormationScalarFieldEnum {
  defenders
  forwards
  id
  midfielders
  name
}

input FormationScalarWhereWithAggregatesInput {
  AND: [FormationScalarWhereWithAggregatesInput!]
  NOT: [FormationScalarWhereWithAggregatesInput!]
  OR: [FormationScalarWhereWithAggregatesInput!]
  defenders: IntWithAggregatesFilter
  forwards: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
  midfielders: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
}

type FormationSumAggregate {
  defenders: Int
  forwards: Int
  id: Int
  midfielders: Int
}

input FormationSumOrderByAggregateInput {
  defenders: SortOrder
  forwards: SortOrder
  id: SortOrder
  midfielders: SortOrder
}

input FormationWhereInput {
  AND: [FormationWhereInput!]
  NOT: [FormationWhereInput!]
  OR: [FormationWhereInput!]
  defenders: IntFilter
  forwards: IntFilter
  id: IntFilter
  midfielders: IntFilter
  name: StringFilter
  teams: TeamListRelationFilter
}

input FormationWhereUniqueInput {
  AND: [FormationWhereInput!]
  NOT: [FormationWhereInput!]
  OR: [FormationWhereInput!]
  defenders: IntFilter
  forwards: IntFilter
  id: Int
  midfielders: IntFilter
  name: StringFilter
  teams: TeamListRelationFilter
}

type Image {
  height: Int!
  url: String!
  width: Int!
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type League {
  _count: LeagueCount
  id: ID!
  leagueCategory: LeagueCategory!
  leagueCategoryId: Int!
  name: String!
  realName: String
  teams(cursor: TeamWhereUniqueInput, distinct: [TeamScalarFieldEnum!], orderBy: [TeamOrderByWithRelationInput!], skip: Int, take: Int, where: TeamWhereInput): [Team!]!
}

type LeagueAvgAggregate {
  id: Float
  leagueCategoryId: Float
}

input LeagueAvgOrderByAggregateInput {
  id: SortOrder
  leagueCategoryId: SortOrder
}

type LeagueCategory {
  _count: LeagueCategoryCount
  id: ID!
  leagues(cursor: LeagueWhereUniqueInput, distinct: [LeagueScalarFieldEnum!], orderBy: [LeagueOrderByWithRelationInput!], skip: Int, take: Int, where: LeagueWhereInput): [League!]!
  name: String!
}

type LeagueCategoryAvgAggregate {
  id: Float
}

input LeagueCategoryAvgOrderByAggregateInput {
  id: SortOrder
}

type LeagueCategoryCount {
  leagues(where: LeagueWhereInput): Int!
}

type LeagueCategoryCountAggregate {
  _all: Int!
  id: Int!
  name: Int!
}

input LeagueCategoryCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

type LeagueCategoryGroupBy {
  _avg: LeagueCategoryAvgAggregate
  _count: LeagueCategoryCountAggregate
  _max: LeagueCategoryMaxAggregate
  _min: LeagueCategoryMinAggregate
  _sum: LeagueCategorySumAggregate
  id: Int!
  name: String!
}

type LeagueCategoryMaxAggregate {
  id: Int
  name: String
}

input LeagueCategoryMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

type LeagueCategoryMinAggregate {
  id: Int
  name: String
}

input LeagueCategoryMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input LeagueCategoryOrderByWithAggregationInput {
  _avg: LeagueCategoryAvgOrderByAggregateInput
  _count: LeagueCategoryCountOrderByAggregateInput
  _max: LeagueCategoryMaxOrderByAggregateInput
  _min: LeagueCategoryMinOrderByAggregateInput
  _sum: LeagueCategorySumOrderByAggregateInput
  id: SortOrder
  name: SortOrder
}

input LeagueCategoryOrderByWithRelationInput {
  id: SortOrder
  leagues: LeagueOrderByRelationAggregateInput
  name: SortOrder
}

input LeagueCategoryRelationFilter {
  is: LeagueCategoryWhereInput
  isNot: LeagueCategoryWhereInput
}

enum LeagueCategoryScalarFieldEnum {
  id
  name
}

input LeagueCategoryScalarWhereWithAggregatesInput {
  AND: [LeagueCategoryScalarWhereWithAggregatesInput!]
  NOT: [LeagueCategoryScalarWhereWithAggregatesInput!]
  OR: [LeagueCategoryScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
}

type LeagueCategorySumAggregate {
  id: Int
}

input LeagueCategorySumOrderByAggregateInput {
  id: SortOrder
}

input LeagueCategoryWhereInput {
  AND: [LeagueCategoryWhereInput!]
  NOT: [LeagueCategoryWhereInput!]
  OR: [LeagueCategoryWhereInput!]
  id: IntFilter
  leagues: LeagueListRelationFilter
  name: StringFilter
}

input LeagueCategoryWhereUniqueInput {
  AND: [LeagueCategoryWhereInput!]
  NOT: [LeagueCategoryWhereInput!]
  OR: [LeagueCategoryWhereInput!]
  id: Int
  leagues: LeagueListRelationFilter
  name: StringFilter
}

type LeagueCount {
  teams(where: TeamWhereInput): Int!
}

type LeagueCountAggregate {
  _all: Int!
  id: Int!
  leagueCategoryId: Int!
  name: Int!
  realName: Int!
}

input LeagueCountOrderByAggregateInput {
  id: SortOrder
  leagueCategoryId: SortOrder
  name: SortOrder
  realName: SortOrder
}

type LeagueGroupBy {
  _avg: LeagueAvgAggregate
  _count: LeagueCountAggregate
  _max: LeagueMaxAggregate
  _min: LeagueMinAggregate
  _sum: LeagueSumAggregate
  id: Int!
  leagueCategoryId: Int!
  name: String!
  realName: String
}

input LeagueListRelationFilter {
  every: LeagueWhereInput
  none: LeagueWhereInput
  some: LeagueWhereInput
}

type LeagueMaxAggregate {
  id: Int
  leagueCategoryId: Int
  name: String
  realName: String
}

input LeagueMaxOrderByAggregateInput {
  id: SortOrder
  leagueCategoryId: SortOrder
  name: SortOrder
  realName: SortOrder
}

type LeagueMinAggregate {
  id: Int
  leagueCategoryId: Int
  name: String
  realName: String
}

input LeagueMinOrderByAggregateInput {
  id: SortOrder
  leagueCategoryId: SortOrder
  name: SortOrder
  realName: SortOrder
}

input LeagueOrderByRelationAggregateInput {
  _count: SortOrder
}

input LeagueOrderByWithAggregationInput {
  _avg: LeagueAvgOrderByAggregateInput
  _count: LeagueCountOrderByAggregateInput
  _max: LeagueMaxOrderByAggregateInput
  _min: LeagueMinOrderByAggregateInput
  _sum: LeagueSumOrderByAggregateInput
  id: SortOrder
  leagueCategoryId: SortOrder
  name: SortOrder
  realName: SortOrderInput
}

input LeagueOrderByWithRelationInput {
  id: SortOrder
  leagueCategory: LeagueCategoryOrderByWithRelationInput
  leagueCategoryId: SortOrder
  name: SortOrder
  realName: SortOrderInput
  teams: TeamOrderByRelationAggregateInput
}

input LeagueRelationFilter {
  is: LeagueWhereInput
  isNot: LeagueWhereInput
}

enum LeagueScalarFieldEnum {
  id
  leagueCategoryId
  name
  realName
}

input LeagueScalarWhereWithAggregatesInput {
  AND: [LeagueScalarWhereWithAggregatesInput!]
  NOT: [LeagueScalarWhereWithAggregatesInput!]
  OR: [LeagueScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  leagueCategoryId: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  realName: StringNullableWithAggregatesFilter
}

type LeagueSumAggregate {
  id: Int
  leagueCategoryId: Int
}

input LeagueSumOrderByAggregateInput {
  id: SortOrder
  leagueCategoryId: SortOrder
}

input LeagueWhereInput {
  AND: [LeagueWhereInput!]
  NOT: [LeagueWhereInput!]
  OR: [LeagueWhereInput!]
  id: IntFilter
  leagueCategory: LeagueCategoryRelationFilter
  leagueCategoryId: IntFilter
  name: StringFilter
  realName: StringNullableFilter
  teams: TeamListRelationFilter
}

input LeagueWhereUniqueInput {
  AND: [LeagueWhereInput!]
  NOT: [LeagueWhereInput!]
  OR: [LeagueWhereInput!]
  id: Int
  leagueCategory: LeagueCategoryRelationFilter
  leagueCategoryId: IntFilter
  name: StringFilter
  realName: StringNullableFilter
  teams: TeamListRelationFilter
}

type Nationality {
  _count: NationalityCount
  flag: Image
  id: ID!
  name: String!
  player(cursor: PlayerWhereUniqueInput, distinct: [PlayerScalarFieldEnum!], orderBy: [PlayerOrderByWithRelationInput!], skip: Int, take: Int, where: PlayerWhereInput): [Player!]!
}

type NationalityAvgAggregate {
  id: Float
}

input NationalityAvgOrderByAggregateInput {
  id: SortOrder
}

type NationalityCount {
  player(where: PlayerWhereInput): Int!
}

type NationalityCountAggregate {
  _all: Int!
  id: Int!
  name: Int!
}

input NationalityCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

type NationalityGroupBy {
  _avg: NationalityAvgAggregate
  _count: NationalityCountAggregate
  _max: NationalityMaxAggregate
  _min: NationalityMinAggregate
  _sum: NationalitySumAggregate
  id: Int!
  name: String!
}

type NationalityMaxAggregate {
  id: Int
  name: String
}

input NationalityMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

type NationalityMinAggregate {
  id: Int
  name: String
}

input NationalityMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input NationalityOrderByWithAggregationInput {
  _avg: NationalityAvgOrderByAggregateInput
  _count: NationalityCountOrderByAggregateInput
  _max: NationalityMaxOrderByAggregateInput
  _min: NationalityMinOrderByAggregateInput
  _sum: NationalitySumOrderByAggregateInput
  id: SortOrder
  name: SortOrder
}

input NationalityOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  player: PlayerOrderByRelationAggregateInput
}

input NationalityRelationFilter {
  is: NationalityWhereInput
  isNot: NationalityWhereInput
}

enum NationalityScalarFieldEnum {
  id
  name
}

input NationalityScalarWhereWithAggregatesInput {
  AND: [NationalityScalarWhereWithAggregatesInput!]
  NOT: [NationalityScalarWhereWithAggregatesInput!]
  OR: [NationalityScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
}

type NationalitySumAggregate {
  id: Int
}

input NationalitySumOrderByAggregateInput {
  id: SortOrder
}

input NationalityWhereInput {
  AND: [NationalityWhereInput!]
  NOT: [NationalityWhereInput!]
  OR: [NationalityWhereInput!]
  id: IntFilter
  name: StringFilter
  player: PlayerListRelationFilter
}

input NationalityWhereUniqueInput {
  AND: [NationalityWhereInput!]
  NOT: [NationalityWhereInput!]
  OR: [NationalityWhereInput!]
  id: Int
  name: StringFilter
  player: PlayerListRelationFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

enum NullsOrder {
  first
  last
}

type Player {
  _count: PlayerCount
  id: ID!
  name: String!
  nationality: Nationality!
  nationalityId: Int!
  picture: Image
  playersAbilities(cursor: PlayersAbilitiesWhereUniqueInput, distinct: [PlayersAbilitiesScalarFieldEnum!], orderBy: [PlayersAbilitiesOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersAbilitiesWhereInput): [PlayersAbilities!]!
  playersAppearances(cursor: PlayersAppearancesWhereUniqueInput, distinct: [PlayersAppearancesScalarFieldEnum!], orderBy: [PlayersAppearancesOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersAppearancesWhereInput): [PlayersAppearances!]!
  playersPositions(cursor: PlayersPositionsWhereUniqueInput, distinct: [PlayersPositionsScalarFieldEnum!], orderBy: [PlayersPositionsOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersPositionsWhereInput): [PlayersPositions!]!
  playersSettings(cursor: PlayersSettingsWhereUniqueInput, distinct: [PlayersSettingsScalarFieldEnum!], orderBy: [PlayersSettingsOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersSettingsWhereInput): [PlayersSettings!]!
  playersSpecialAbilities(cursor: PlayersSpecialAbilitiesWhereUniqueInput, distinct: [PlayersSpecialAbilitiesScalarFieldEnum!], orderBy: [PlayersSpecialAbilitiesOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersSpecialAbilitiesWhereInput): [PlayersSpecialAbilities!]!
  playersTeams(cursor: PlayersTeamsWhereUniqueInput, distinct: [PlayersTeamsScalarFieldEnum!], orderBy: [PlayersTeamsOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersTeamsWhereInput): [PlayersTeams!]!
  realName: String
  stripName: String!
}

type PlayerAvgAggregate {
  id: Float
  nationalityId: Float
}

input PlayerAvgOrderByAggregateInput {
  id: SortOrder
  nationalityId: SortOrder
}

type PlayerCount {
  playersAbilities(where: PlayersAbilitiesWhereInput): Int!
  playersAppearances(where: PlayersAppearancesWhereInput): Int!
  playersPositions(where: PlayersPositionsWhereInput): Int!
  playersSettings(where: PlayersSettingsWhereInput): Int!
  playersSpecialAbilities(where: PlayersSpecialAbilitiesWhereInput): Int!
  playersTeams(where: PlayersTeamsWhereInput): Int!
}

type PlayerCountAggregate {
  _all: Int!
  id: Int!
  name: Int!
  nationalityId: Int!
  realName: Int!
  stripName: Int!
}

input PlayerCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  nationalityId: SortOrder
  realName: SortOrder
  stripName: SortOrder
}

type PlayerGroupBy {
  _avg: PlayerAvgAggregate
  _count: PlayerCountAggregate
  _max: PlayerMaxAggregate
  _min: PlayerMinAggregate
  _sum: PlayerSumAggregate
  id: Int!
  name: String!
  nationalityId: Int!
  realName: String
  stripName: String!
}

input PlayerListRelationFilter {
  every: PlayerWhereInput
  none: PlayerWhereInput
  some: PlayerWhereInput
}

type PlayerMaxAggregate {
  id: Int
  name: String
  nationalityId: Int
  realName: String
  stripName: String
}

input PlayerMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  nationalityId: SortOrder
  realName: SortOrder
  stripName: SortOrder
}

type PlayerMinAggregate {
  id: Int
  name: String
  nationalityId: Int
  realName: String
  stripName: String
}

input PlayerMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  nationalityId: SortOrder
  realName: SortOrder
  stripName: SortOrder
}

input PlayerOrderByRelationAggregateInput {
  _count: SortOrder
}

input PlayerOrderByWithAggregationInput {
  _avg: PlayerAvgOrderByAggregateInput
  _count: PlayerCountOrderByAggregateInput
  _max: PlayerMaxOrderByAggregateInput
  _min: PlayerMinOrderByAggregateInput
  _sum: PlayerSumOrderByAggregateInput
  id: SortOrder
  name: SortOrder
  nationalityId: SortOrder
  realName: SortOrderInput
  stripName: SortOrder
}

input PlayerOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  nationality: NationalityOrderByWithRelationInput
  nationalityId: SortOrder
  playersAbilities: PlayersAbilitiesOrderByRelationAggregateInput
  playersAppearances: PlayersAppearancesOrderByRelationAggregateInput
  playersPositions: PlayersPositionsOrderByRelationAggregateInput
  playersSettings: PlayersSettingsOrderByRelationAggregateInput
  playersSpecialAbilities: PlayersSpecialAbilitiesOrderByRelationAggregateInput
  playersTeams: PlayersTeamsOrderByRelationAggregateInput
  realName: SortOrderInput
  stripName: SortOrder
}

input PlayerRelationFilter {
  is: PlayerWhereInput
  isNot: PlayerWhereInput
}

enum PlayerScalarFieldEnum {
  id
  name
  nationalityId
  realName
  stripName
}

input PlayerScalarWhereWithAggregatesInput {
  AND: [PlayerScalarWhereWithAggregatesInput!]
  NOT: [PlayerScalarWhereWithAggregatesInput!]
  OR: [PlayerScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  nationalityId: IntWithAggregatesFilter
  realName: StringNullableWithAggregatesFilter
  stripName: StringWithAggregatesFilter
}

type PlayerSumAggregate {
  id: Int
  nationalityId: Int
}

input PlayerSumOrderByAggregateInput {
  id: SortOrder
  nationalityId: SortOrder
}

input PlayerWhereInput {
  AND: [PlayerWhereInput!]
  NOT: [PlayerWhereInput!]
  OR: [PlayerWhereInput!]
  id: IntFilter
  name: StringFilter
  nationality: NationalityRelationFilter
  nationalityId: IntFilter
  playersAbilities: PlayersAbilitiesListRelationFilter
  playersAppearances: PlayersAppearancesListRelationFilter
  playersPositions: PlayersPositionsListRelationFilter
  playersSettings: PlayersSettingsListRelationFilter
  playersSpecialAbilities: PlayersSpecialAbilitiesListRelationFilter
  playersTeams: PlayersTeamsListRelationFilter
  realName: StringNullableFilter
  stripName: StringFilter
}

input PlayerWhereUniqueInput {
  AND: [PlayerWhereInput!]
  NOT: [PlayerWhereInput!]
  OR: [PlayerWhereInput!]
  id: Int
  name: StringFilter
  nationality: NationalityRelationFilter
  nationalityId: IntFilter
  playersAbilities: PlayersAbilitiesListRelationFilter
  playersAppearances: PlayersAppearancesListRelationFilter
  playersPositions: PlayersPositionsListRelationFilter
  playersSettings: PlayersSettingsListRelationFilter
  playersSpecialAbilities: PlayersSpecialAbilitiesListRelationFilter
  playersTeams: PlayersTeamsListRelationFilter
  realName: StringNullableFilter
  stripName: StringFilter
}

type PlayersAbilities {
  ability: Ability!
  abilityId: Int!
  id: ID!
  player: Player!
  playerId: Int!
  value: Int!
}

type PlayersAbilitiesAvgAggregate {
  abilityId: Float
  id: Float
  playerId: Float
  value: Float
}

input PlayersAbilitiesAvgOrderByAggregateInput {
  abilityId: SortOrder
  id: SortOrder
  playerId: SortOrder
  value: SortOrder
}

type PlayersAbilitiesCountAggregate {
  _all: Int!
  abilityId: Int!
  id: Int!
  playerId: Int!
  value: Int!
}

input PlayersAbilitiesCountOrderByAggregateInput {
  abilityId: SortOrder
  id: SortOrder
  playerId: SortOrder
  value: SortOrder
}

type PlayersAbilitiesGroupBy {
  _avg: PlayersAbilitiesAvgAggregate
  _count: PlayersAbilitiesCountAggregate
  _max: PlayersAbilitiesMaxAggregate
  _min: PlayersAbilitiesMinAggregate
  _sum: PlayersAbilitiesSumAggregate
  abilityId: Int!
  id: Int!
  playerId: Int!
  value: Int!
}

input PlayersAbilitiesListRelationFilter {
  every: PlayersAbilitiesWhereInput
  none: PlayersAbilitiesWhereInput
  some: PlayersAbilitiesWhereInput
}

type PlayersAbilitiesMaxAggregate {
  abilityId: Int
  id: Int
  playerId: Int
  value: Int
}

input PlayersAbilitiesMaxOrderByAggregateInput {
  abilityId: SortOrder
  id: SortOrder
  playerId: SortOrder
  value: SortOrder
}

type PlayersAbilitiesMinAggregate {
  abilityId: Int
  id: Int
  playerId: Int
  value: Int
}

input PlayersAbilitiesMinOrderByAggregateInput {
  abilityId: SortOrder
  id: SortOrder
  playerId: SortOrder
  value: SortOrder
}

input PlayersAbilitiesOrderByRelationAggregateInput {
  _count: SortOrder
}

input PlayersAbilitiesOrderByWithAggregationInput {
  _avg: PlayersAbilitiesAvgOrderByAggregateInput
  _count: PlayersAbilitiesCountOrderByAggregateInput
  _max: PlayersAbilitiesMaxOrderByAggregateInput
  _min: PlayersAbilitiesMinOrderByAggregateInput
  _sum: PlayersAbilitiesSumOrderByAggregateInput
  abilityId: SortOrder
  id: SortOrder
  playerId: SortOrder
  value: SortOrder
}

input PlayersAbilitiesOrderByWithRelationInput {
  ability: AbilityOrderByWithRelationInput
  abilityId: SortOrder
  id: SortOrder
  player: PlayerOrderByWithRelationInput
  playerId: SortOrder
  value: SortOrder
}

input PlayersAbilitiesPlayerIdAbilityIdCompoundUniqueInput {
  abilityId: Int!
  playerId: Int!
}

enum PlayersAbilitiesScalarFieldEnum {
  abilityId
  id
  playerId
  value
}

input PlayersAbilitiesScalarWhereWithAggregatesInput {
  AND: [PlayersAbilitiesScalarWhereWithAggregatesInput!]
  NOT: [PlayersAbilitiesScalarWhereWithAggregatesInput!]
  OR: [PlayersAbilitiesScalarWhereWithAggregatesInput!]
  abilityId: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
  playerId: IntWithAggregatesFilter
  value: IntWithAggregatesFilter
}

type PlayersAbilitiesSumAggregate {
  abilityId: Int
  id: Int
  playerId: Int
  value: Int
}

input PlayersAbilitiesSumOrderByAggregateInput {
  abilityId: SortOrder
  id: SortOrder
  playerId: SortOrder
  value: SortOrder
}

input PlayersAbilitiesWhereInput {
  AND: [PlayersAbilitiesWhereInput!]
  NOT: [PlayersAbilitiesWhereInput!]
  OR: [PlayersAbilitiesWhereInput!]
  ability: AbilityRelationFilter
  abilityId: IntFilter
  id: IntFilter
  player: PlayerRelationFilter
  playerId: IntFilter
  value: IntFilter
}

input PlayersAbilitiesWhereUniqueInput {
  AND: [PlayersAbilitiesWhereInput!]
  NOT: [PlayersAbilitiesWhereInput!]
  OR: [PlayersAbilitiesWhereInput!]
  ability: AbilityRelationFilter
  abilityId: IntFilter
  id: Int
  player: PlayerRelationFilter
  playerId: IntFilter
  playerId_abilityId: PlayersAbilitiesPlayerIdAbilityIdCompoundUniqueInput
  value: IntFilter
}

type PlayersAppearances {
  appearance: Appearance!
  appearanceId: Int!
  appearanceValue(where: AppearanceValueWhereInput): AppearanceValue
  appearanceValueId: Int
  id: ID!
  player: Player!
  playerId: Int!
  value: Int
}

type PlayersAppearancesAvgAggregate {
  appearanceId: Float
  appearanceValueId: Float
  id: Float
  playerId: Float
  value: Float
}

input PlayersAppearancesAvgOrderByAggregateInput {
  appearanceId: SortOrder
  appearanceValueId: SortOrder
  id: SortOrder
  playerId: SortOrder
  value: SortOrder
}

type PlayersAppearancesCountAggregate {
  _all: Int!
  appearanceId: Int!
  appearanceValueId: Int!
  id: Int!
  playerId: Int!
  value: Int!
}

input PlayersAppearancesCountOrderByAggregateInput {
  appearanceId: SortOrder
  appearanceValueId: SortOrder
  id: SortOrder
  playerId: SortOrder
  value: SortOrder
}

type PlayersAppearancesGroupBy {
  _avg: PlayersAppearancesAvgAggregate
  _count: PlayersAppearancesCountAggregate
  _max: PlayersAppearancesMaxAggregate
  _min: PlayersAppearancesMinAggregate
  _sum: PlayersAppearancesSumAggregate
  appearanceId: Int!
  appearanceValueId: Int
  id: Int!
  playerId: Int!
  value: Int
}

input PlayersAppearancesListRelationFilter {
  every: PlayersAppearancesWhereInput
  none: PlayersAppearancesWhereInput
  some: PlayersAppearancesWhereInput
}

type PlayersAppearancesMaxAggregate {
  appearanceId: Int
  appearanceValueId: Int
  id: Int
  playerId: Int
  value: Int
}

input PlayersAppearancesMaxOrderByAggregateInput {
  appearanceId: SortOrder
  appearanceValueId: SortOrder
  id: SortOrder
  playerId: SortOrder
  value: SortOrder
}

type PlayersAppearancesMinAggregate {
  appearanceId: Int
  appearanceValueId: Int
  id: Int
  playerId: Int
  value: Int
}

input PlayersAppearancesMinOrderByAggregateInput {
  appearanceId: SortOrder
  appearanceValueId: SortOrder
  id: SortOrder
  playerId: SortOrder
  value: SortOrder
}

input PlayersAppearancesOrderByRelationAggregateInput {
  _count: SortOrder
}

input PlayersAppearancesOrderByWithAggregationInput {
  _avg: PlayersAppearancesAvgOrderByAggregateInput
  _count: PlayersAppearancesCountOrderByAggregateInput
  _max: PlayersAppearancesMaxOrderByAggregateInput
  _min: PlayersAppearancesMinOrderByAggregateInput
  _sum: PlayersAppearancesSumOrderByAggregateInput
  appearanceId: SortOrder
  appearanceValueId: SortOrderInput
  id: SortOrder
  playerId: SortOrder
  value: SortOrderInput
}

input PlayersAppearancesOrderByWithRelationInput {
  appearance: AppearanceOrderByWithRelationInput
  appearanceId: SortOrder
  appearanceValue: AppearanceValueOrderByWithRelationInput
  appearanceValueId: SortOrderInput
  id: SortOrder
  player: PlayerOrderByWithRelationInput
  playerId: SortOrder
  value: SortOrderInput
}

input PlayersAppearancesPlayerIdAppearanceIdCompoundUniqueInput {
  appearanceId: Int!
  playerId: Int!
}

enum PlayersAppearancesScalarFieldEnum {
  appearanceId
  appearanceValueId
  id
  playerId
  value
}

input PlayersAppearancesScalarWhereWithAggregatesInput {
  AND: [PlayersAppearancesScalarWhereWithAggregatesInput!]
  NOT: [PlayersAppearancesScalarWhereWithAggregatesInput!]
  OR: [PlayersAppearancesScalarWhereWithAggregatesInput!]
  appearanceId: IntWithAggregatesFilter
  appearanceValueId: IntNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  playerId: IntWithAggregatesFilter
  value: IntNullableWithAggregatesFilter
}

type PlayersAppearancesSumAggregate {
  appearanceId: Int
  appearanceValueId: Int
  id: Int
  playerId: Int
  value: Int
}

input PlayersAppearancesSumOrderByAggregateInput {
  appearanceId: SortOrder
  appearanceValueId: SortOrder
  id: SortOrder
  playerId: SortOrder
  value: SortOrder
}

input PlayersAppearancesWhereInput {
  AND: [PlayersAppearancesWhereInput!]
  NOT: [PlayersAppearancesWhereInput!]
  OR: [PlayersAppearancesWhereInput!]
  appearance: AppearanceRelationFilter
  appearanceId: IntFilter
  appearanceValue: AppearanceValueNullableRelationFilter
  appearanceValueId: IntNullableFilter
  id: IntFilter
  player: PlayerRelationFilter
  playerId: IntFilter
  value: IntNullableFilter
}

input PlayersAppearancesWhereUniqueInput {
  AND: [PlayersAppearancesWhereInput!]
  NOT: [PlayersAppearancesWhereInput!]
  OR: [PlayersAppearancesWhereInput!]
  appearance: AppearanceRelationFilter
  appearanceId: IntFilter
  appearanceValue: AppearanceValueNullableRelationFilter
  appearanceValueId: IntNullableFilter
  id: Int
  player: PlayerRelationFilter
  playerId: IntFilter
  playerId_appearanceId: PlayersAppearancesPlayerIdAppearanceIdCompoundUniqueInput
  value: IntNullableFilter
}

type PlayersPositions {
  id: ID!
  player: Player!
  playerId: Int!
  position: Position!
  positionId: Int!
  registered: Boolean!
}

type PlayersPositionsAvgAggregate {
  id: Float
  playerId: Float
  positionId: Float
}

input PlayersPositionsAvgOrderByAggregateInput {
  id: SortOrder
  playerId: SortOrder
  positionId: SortOrder
}

type PlayersPositionsCountAggregate {
  _all: Int!
  id: Int!
  playerId: Int!
  positionId: Int!
  registered: Int!
}

input PlayersPositionsCountOrderByAggregateInput {
  id: SortOrder
  playerId: SortOrder
  positionId: SortOrder
  registered: SortOrder
}

type PlayersPositionsGroupBy {
  _avg: PlayersPositionsAvgAggregate
  _count: PlayersPositionsCountAggregate
  _max: PlayersPositionsMaxAggregate
  _min: PlayersPositionsMinAggregate
  _sum: PlayersPositionsSumAggregate
  id: Int!
  playerId: Int!
  positionId: Int!
  registered: Boolean!
}

input PlayersPositionsListRelationFilter {
  every: PlayersPositionsWhereInput
  none: PlayersPositionsWhereInput
  some: PlayersPositionsWhereInput
}

type PlayersPositionsMaxAggregate {
  id: Int
  playerId: Int
  positionId: Int
  registered: Boolean
}

input PlayersPositionsMaxOrderByAggregateInput {
  id: SortOrder
  playerId: SortOrder
  positionId: SortOrder
  registered: SortOrder
}

type PlayersPositionsMinAggregate {
  id: Int
  playerId: Int
  positionId: Int
  registered: Boolean
}

input PlayersPositionsMinOrderByAggregateInput {
  id: SortOrder
  playerId: SortOrder
  positionId: SortOrder
  registered: SortOrder
}

input PlayersPositionsOrderByRelationAggregateInput {
  _count: SortOrder
}

input PlayersPositionsOrderByWithAggregationInput {
  _avg: PlayersPositionsAvgOrderByAggregateInput
  _count: PlayersPositionsCountOrderByAggregateInput
  _max: PlayersPositionsMaxOrderByAggregateInput
  _min: PlayersPositionsMinOrderByAggregateInput
  _sum: PlayersPositionsSumOrderByAggregateInput
  id: SortOrder
  playerId: SortOrder
  positionId: SortOrder
  registered: SortOrder
}

input PlayersPositionsOrderByWithRelationInput {
  id: SortOrder
  player: PlayerOrderByWithRelationInput
  playerId: SortOrder
  position: PositionOrderByWithRelationInput
  positionId: SortOrder
  registered: SortOrder
}

input PlayersPositionsPlayerIdPositionIdCompoundUniqueInput {
  playerId: Int!
  positionId: Int!
}

enum PlayersPositionsScalarFieldEnum {
  id
  playerId
  positionId
  registered
}

input PlayersPositionsScalarWhereWithAggregatesInput {
  AND: [PlayersPositionsScalarWhereWithAggregatesInput!]
  NOT: [PlayersPositionsScalarWhereWithAggregatesInput!]
  OR: [PlayersPositionsScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  playerId: IntWithAggregatesFilter
  positionId: IntWithAggregatesFilter
  registered: BoolWithAggregatesFilter
}

type PlayersPositionsSumAggregate {
  id: Int
  playerId: Int
  positionId: Int
}

input PlayersPositionsSumOrderByAggregateInput {
  id: SortOrder
  playerId: SortOrder
  positionId: SortOrder
}

input PlayersPositionsWhereInput {
  AND: [PlayersPositionsWhereInput!]
  NOT: [PlayersPositionsWhereInput!]
  OR: [PlayersPositionsWhereInput!]
  id: IntFilter
  player: PlayerRelationFilter
  playerId: IntFilter
  position: PositionRelationFilter
  positionId: IntFilter
  registered: BoolFilter
}

input PlayersPositionsWhereUniqueInput {
  AND: [PlayersPositionsWhereInput!]
  NOT: [PlayersPositionsWhereInput!]
  OR: [PlayersPositionsWhereInput!]
  id: Int
  player: PlayerRelationFilter
  playerId: IntFilter
  playerId_positionId: PlayersPositionsPlayerIdPositionIdCompoundUniqueInput
  position: PositionRelationFilter
  positionId: IntFilter
  registered: BoolFilter
}

type PlayersSettings {
  id: ID!
  player: Player!
  playerId: Int!
  setting: Setting!
  settingId: Int!
  settingValue(where: SettingValueWhereInput): SettingValue
  settingValueId: Int
  value: Int
}

type PlayersSettingsAvgAggregate {
  id: Float
  playerId: Float
  settingId: Float
  settingValueId: Float
  value: Float
}

input PlayersSettingsAvgOrderByAggregateInput {
  id: SortOrder
  playerId: SortOrder
  settingId: SortOrder
  settingValueId: SortOrder
  value: SortOrder
}

type PlayersSettingsCountAggregate {
  _all: Int!
  id: Int!
  playerId: Int!
  settingId: Int!
  settingValueId: Int!
  value: Int!
}

input PlayersSettingsCountOrderByAggregateInput {
  id: SortOrder
  playerId: SortOrder
  settingId: SortOrder
  settingValueId: SortOrder
  value: SortOrder
}

type PlayersSettingsGroupBy {
  _avg: PlayersSettingsAvgAggregate
  _count: PlayersSettingsCountAggregate
  _max: PlayersSettingsMaxAggregate
  _min: PlayersSettingsMinAggregate
  _sum: PlayersSettingsSumAggregate
  id: Int!
  playerId: Int!
  settingId: Int!
  settingValueId: Int
  value: Int
}

input PlayersSettingsListRelationFilter {
  every: PlayersSettingsWhereInput
  none: PlayersSettingsWhereInput
  some: PlayersSettingsWhereInput
}

type PlayersSettingsMaxAggregate {
  id: Int
  playerId: Int
  settingId: Int
  settingValueId: Int
  value: Int
}

input PlayersSettingsMaxOrderByAggregateInput {
  id: SortOrder
  playerId: SortOrder
  settingId: SortOrder
  settingValueId: SortOrder
  value: SortOrder
}

type PlayersSettingsMinAggregate {
  id: Int
  playerId: Int
  settingId: Int
  settingValueId: Int
  value: Int
}

input PlayersSettingsMinOrderByAggregateInput {
  id: SortOrder
  playerId: SortOrder
  settingId: SortOrder
  settingValueId: SortOrder
  value: SortOrder
}

input PlayersSettingsOrderByRelationAggregateInput {
  _count: SortOrder
}

input PlayersSettingsOrderByWithAggregationInput {
  _avg: PlayersSettingsAvgOrderByAggregateInput
  _count: PlayersSettingsCountOrderByAggregateInput
  _max: PlayersSettingsMaxOrderByAggregateInput
  _min: PlayersSettingsMinOrderByAggregateInput
  _sum: PlayersSettingsSumOrderByAggregateInput
  id: SortOrder
  playerId: SortOrder
  settingId: SortOrder
  settingValueId: SortOrderInput
  value: SortOrderInput
}

input PlayersSettingsOrderByWithRelationInput {
  id: SortOrder
  player: PlayerOrderByWithRelationInput
  playerId: SortOrder
  setting: SettingOrderByWithRelationInput
  settingId: SortOrder
  settingValue: SettingValueOrderByWithRelationInput
  settingValueId: SortOrderInput
  value: SortOrderInput
}

input PlayersSettingsPlayerIdSettingIdCompoundUniqueInput {
  playerId: Int!
  settingId: Int!
}

enum PlayersSettingsScalarFieldEnum {
  id
  playerId
  settingId
  settingValueId
  value
}

input PlayersSettingsScalarWhereWithAggregatesInput {
  AND: [PlayersSettingsScalarWhereWithAggregatesInput!]
  NOT: [PlayersSettingsScalarWhereWithAggregatesInput!]
  OR: [PlayersSettingsScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  playerId: IntWithAggregatesFilter
  settingId: IntWithAggregatesFilter
  settingValueId: IntNullableWithAggregatesFilter
  value: IntNullableWithAggregatesFilter
}

type PlayersSettingsSumAggregate {
  id: Int
  playerId: Int
  settingId: Int
  settingValueId: Int
  value: Int
}

input PlayersSettingsSumOrderByAggregateInput {
  id: SortOrder
  playerId: SortOrder
  settingId: SortOrder
  settingValueId: SortOrder
  value: SortOrder
}

input PlayersSettingsWhereInput {
  AND: [PlayersSettingsWhereInput!]
  NOT: [PlayersSettingsWhereInput!]
  OR: [PlayersSettingsWhereInput!]
  id: IntFilter
  player: PlayerRelationFilter
  playerId: IntFilter
  setting: SettingRelationFilter
  settingId: IntFilter
  settingValue: SettingValueNullableRelationFilter
  settingValueId: IntNullableFilter
  value: IntNullableFilter
}

input PlayersSettingsWhereUniqueInput {
  AND: [PlayersSettingsWhereInput!]
  NOT: [PlayersSettingsWhereInput!]
  OR: [PlayersSettingsWhereInput!]
  id: Int
  player: PlayerRelationFilter
  playerId: IntFilter
  playerId_settingId: PlayersSettingsPlayerIdSettingIdCompoundUniqueInput
  setting: SettingRelationFilter
  settingId: IntFilter
  settingValue: SettingValueNullableRelationFilter
  settingValueId: IntNullableFilter
  value: IntNullableFilter
}

type PlayersSpecialAbilities {
  active: Boolean!
  id: ID!
  player: Player!
  playerId: Int!
  specialAbility: SpecialAbility!
  specialAbilityId: Int!
}

type PlayersSpecialAbilitiesAvgAggregate {
  id: Float
  playerId: Float
  specialAbilityId: Float
}

input PlayersSpecialAbilitiesAvgOrderByAggregateInput {
  id: SortOrder
  playerId: SortOrder
  specialAbilityId: SortOrder
}

type PlayersSpecialAbilitiesCountAggregate {
  _all: Int!
  active: Int!
  id: Int!
  playerId: Int!
  specialAbilityId: Int!
}

input PlayersSpecialAbilitiesCountOrderByAggregateInput {
  active: SortOrder
  id: SortOrder
  playerId: SortOrder
  specialAbilityId: SortOrder
}

type PlayersSpecialAbilitiesGroupBy {
  _avg: PlayersSpecialAbilitiesAvgAggregate
  _count: PlayersSpecialAbilitiesCountAggregate
  _max: PlayersSpecialAbilitiesMaxAggregate
  _min: PlayersSpecialAbilitiesMinAggregate
  _sum: PlayersSpecialAbilitiesSumAggregate
  active: Boolean!
  id: Int!
  playerId: Int!
  specialAbilityId: Int!
}

input PlayersSpecialAbilitiesListRelationFilter {
  every: PlayersSpecialAbilitiesWhereInput
  none: PlayersSpecialAbilitiesWhereInput
  some: PlayersSpecialAbilitiesWhereInput
}

type PlayersSpecialAbilitiesMaxAggregate {
  active: Boolean
  id: Int
  playerId: Int
  specialAbilityId: Int
}

input PlayersSpecialAbilitiesMaxOrderByAggregateInput {
  active: SortOrder
  id: SortOrder
  playerId: SortOrder
  specialAbilityId: SortOrder
}

type PlayersSpecialAbilitiesMinAggregate {
  active: Boolean
  id: Int
  playerId: Int
  specialAbilityId: Int
}

input PlayersSpecialAbilitiesMinOrderByAggregateInput {
  active: SortOrder
  id: SortOrder
  playerId: SortOrder
  specialAbilityId: SortOrder
}

input PlayersSpecialAbilitiesOrderByRelationAggregateInput {
  _count: SortOrder
}

input PlayersSpecialAbilitiesOrderByWithAggregationInput {
  _avg: PlayersSpecialAbilitiesAvgOrderByAggregateInput
  _count: PlayersSpecialAbilitiesCountOrderByAggregateInput
  _max: PlayersSpecialAbilitiesMaxOrderByAggregateInput
  _min: PlayersSpecialAbilitiesMinOrderByAggregateInput
  _sum: PlayersSpecialAbilitiesSumOrderByAggregateInput
  active: SortOrder
  id: SortOrder
  playerId: SortOrder
  specialAbilityId: SortOrder
}

input PlayersSpecialAbilitiesOrderByWithRelationInput {
  active: SortOrder
  id: SortOrder
  player: PlayerOrderByWithRelationInput
  playerId: SortOrder
  specialAbility: SpecialAbilityOrderByWithRelationInput
  specialAbilityId: SortOrder
}

input PlayersSpecialAbilitiesPlayerIdSpecialAbilityIdCompoundUniqueInput {
  playerId: Int!
  specialAbilityId: Int!
}

enum PlayersSpecialAbilitiesScalarFieldEnum {
  active
  id
  playerId
  specialAbilityId
}

input PlayersSpecialAbilitiesScalarWhereWithAggregatesInput {
  AND: [PlayersSpecialAbilitiesScalarWhereWithAggregatesInput!]
  NOT: [PlayersSpecialAbilitiesScalarWhereWithAggregatesInput!]
  OR: [PlayersSpecialAbilitiesScalarWhereWithAggregatesInput!]
  active: BoolWithAggregatesFilter
  id: IntWithAggregatesFilter
  playerId: IntWithAggregatesFilter
  specialAbilityId: IntWithAggregatesFilter
}

type PlayersSpecialAbilitiesSumAggregate {
  id: Int
  playerId: Int
  specialAbilityId: Int
}

input PlayersSpecialAbilitiesSumOrderByAggregateInput {
  id: SortOrder
  playerId: SortOrder
  specialAbilityId: SortOrder
}

input PlayersSpecialAbilitiesWhereInput {
  AND: [PlayersSpecialAbilitiesWhereInput!]
  NOT: [PlayersSpecialAbilitiesWhereInput!]
  OR: [PlayersSpecialAbilitiesWhereInput!]
  active: BoolFilter
  id: IntFilter
  player: PlayerRelationFilter
  playerId: IntFilter
  specialAbility: SpecialAbilityRelationFilter
  specialAbilityId: IntFilter
}

input PlayersSpecialAbilitiesWhereUniqueInput {
  AND: [PlayersSpecialAbilitiesWhereInput!]
  NOT: [PlayersSpecialAbilitiesWhereInput!]
  OR: [PlayersSpecialAbilitiesWhereInput!]
  active: BoolFilter
  id: Int
  player: PlayerRelationFilter
  playerId: IntFilter
  playerId_specialAbilityId: PlayersSpecialAbilitiesPlayerIdSpecialAbilityIdCompoundUniqueInput
  specialAbility: SpecialAbilityRelationFilter
  specialAbilityId: IntFilter
}

type PlayersTeams {
  captain: Boolean!
  id: ID!
  leftCkTaker: Boolean!
  longFkTaker: Boolean!
  number: Int!
  penaltyTaker: Boolean!
  player: Player!
  playerId: Int!
  rightCkTaker: Boolean!
  shortFkTaker: Boolean!
  starter: Boolean!
  team: Team!
  teamId: Int!
}

type PlayersTeamsAvgAggregate {
  id: Float
  number: Float
  playerId: Float
  teamId: Float
}

input PlayersTeamsAvgOrderByAggregateInput {
  id: SortOrder
  number: SortOrder
  playerId: SortOrder
  teamId: SortOrder
}

type PlayersTeamsCountAggregate {
  _all: Int!
  captain: Int!
  id: Int!
  leftCkTaker: Int!
  longFkTaker: Int!
  number: Int!
  penaltyTaker: Int!
  playerId: Int!
  rightCkTaker: Int!
  shortFkTaker: Int!
  starter: Int!
  teamId: Int!
}

input PlayersTeamsCountOrderByAggregateInput {
  captain: SortOrder
  id: SortOrder
  leftCkTaker: SortOrder
  longFkTaker: SortOrder
  number: SortOrder
  penaltyTaker: SortOrder
  playerId: SortOrder
  rightCkTaker: SortOrder
  shortFkTaker: SortOrder
  starter: SortOrder
  teamId: SortOrder
}

type PlayersTeamsGroupBy {
  _avg: PlayersTeamsAvgAggregate
  _count: PlayersTeamsCountAggregate
  _max: PlayersTeamsMaxAggregate
  _min: PlayersTeamsMinAggregate
  _sum: PlayersTeamsSumAggregate
  captain: Boolean!
  id: Int!
  leftCkTaker: Boolean!
  longFkTaker: Boolean!
  number: Int!
  penaltyTaker: Boolean!
  playerId: Int!
  rightCkTaker: Boolean!
  shortFkTaker: Boolean!
  starter: Boolean!
  teamId: Int!
}

input PlayersTeamsListRelationFilter {
  every: PlayersTeamsWhereInput
  none: PlayersTeamsWhereInput
  some: PlayersTeamsWhereInput
}

type PlayersTeamsMaxAggregate {
  captain: Boolean
  id: Int
  leftCkTaker: Boolean
  longFkTaker: Boolean
  number: Int
  penaltyTaker: Boolean
  playerId: Int
  rightCkTaker: Boolean
  shortFkTaker: Boolean
  starter: Boolean
  teamId: Int
}

input PlayersTeamsMaxOrderByAggregateInput {
  captain: SortOrder
  id: SortOrder
  leftCkTaker: SortOrder
  longFkTaker: SortOrder
  number: SortOrder
  penaltyTaker: SortOrder
  playerId: SortOrder
  rightCkTaker: SortOrder
  shortFkTaker: SortOrder
  starter: SortOrder
  teamId: SortOrder
}

type PlayersTeamsMinAggregate {
  captain: Boolean
  id: Int
  leftCkTaker: Boolean
  longFkTaker: Boolean
  number: Int
  penaltyTaker: Boolean
  playerId: Int
  rightCkTaker: Boolean
  shortFkTaker: Boolean
  starter: Boolean
  teamId: Int
}

input PlayersTeamsMinOrderByAggregateInput {
  captain: SortOrder
  id: SortOrder
  leftCkTaker: SortOrder
  longFkTaker: SortOrder
  number: SortOrder
  penaltyTaker: SortOrder
  playerId: SortOrder
  rightCkTaker: SortOrder
  shortFkTaker: SortOrder
  starter: SortOrder
  teamId: SortOrder
}

input PlayersTeamsOrderByRelationAggregateInput {
  _count: SortOrder
}

input PlayersTeamsOrderByWithAggregationInput {
  _avg: PlayersTeamsAvgOrderByAggregateInput
  _count: PlayersTeamsCountOrderByAggregateInput
  _max: PlayersTeamsMaxOrderByAggregateInput
  _min: PlayersTeamsMinOrderByAggregateInput
  _sum: PlayersTeamsSumOrderByAggregateInput
  captain: SortOrder
  id: SortOrder
  leftCkTaker: SortOrder
  longFkTaker: SortOrder
  number: SortOrder
  penaltyTaker: SortOrder
  playerId: SortOrder
  rightCkTaker: SortOrder
  shortFkTaker: SortOrder
  starter: SortOrder
  teamId: SortOrder
}

input PlayersTeamsOrderByWithRelationInput {
  captain: SortOrder
  id: SortOrder
  leftCkTaker: SortOrder
  longFkTaker: SortOrder
  number: SortOrder
  penaltyTaker: SortOrder
  player: PlayerOrderByWithRelationInput
  playerId: SortOrder
  rightCkTaker: SortOrder
  shortFkTaker: SortOrder
  starter: SortOrder
  team: TeamOrderByWithRelationInput
  teamId: SortOrder
}

input PlayersTeamsPlayerIdTeamIdCompoundUniqueInput {
  playerId: Int!
  teamId: Int!
}

enum PlayersTeamsScalarFieldEnum {
  captain
  id
  leftCkTaker
  longFkTaker
  number
  penaltyTaker
  playerId
  rightCkTaker
  shortFkTaker
  starter
  teamId
}

input PlayersTeamsScalarWhereWithAggregatesInput {
  AND: [PlayersTeamsScalarWhereWithAggregatesInput!]
  NOT: [PlayersTeamsScalarWhereWithAggregatesInput!]
  OR: [PlayersTeamsScalarWhereWithAggregatesInput!]
  captain: BoolWithAggregatesFilter
  id: IntWithAggregatesFilter
  leftCkTaker: BoolWithAggregatesFilter
  longFkTaker: BoolWithAggregatesFilter
  number: IntWithAggregatesFilter
  penaltyTaker: BoolWithAggregatesFilter
  playerId: IntWithAggregatesFilter
  rightCkTaker: BoolWithAggregatesFilter
  shortFkTaker: BoolWithAggregatesFilter
  starter: BoolWithAggregatesFilter
  teamId: IntWithAggregatesFilter
}

type PlayersTeamsSumAggregate {
  id: Int
  number: Int
  playerId: Int
  teamId: Int
}

input PlayersTeamsSumOrderByAggregateInput {
  id: SortOrder
  number: SortOrder
  playerId: SortOrder
  teamId: SortOrder
}

input PlayersTeamsTeamIdNumberCompoundUniqueInput {
  number: Int!
  teamId: Int!
}

input PlayersTeamsWhereInput {
  AND: [PlayersTeamsWhereInput!]
  NOT: [PlayersTeamsWhereInput!]
  OR: [PlayersTeamsWhereInput!]
  captain: BoolFilter
  id: IntFilter
  leftCkTaker: BoolFilter
  longFkTaker: BoolFilter
  number: IntFilter
  penaltyTaker: BoolFilter
  player: PlayerRelationFilter
  playerId: IntFilter
  rightCkTaker: BoolFilter
  shortFkTaker: BoolFilter
  starter: BoolFilter
  team: TeamRelationFilter
  teamId: IntFilter
}

input PlayersTeamsWhereUniqueInput {
  AND: [PlayersTeamsWhereInput!]
  NOT: [PlayersTeamsWhereInput!]
  OR: [PlayersTeamsWhereInput!]
  captain: BoolFilter
  id: Int
  leftCkTaker: BoolFilter
  longFkTaker: BoolFilter
  number: IntFilter
  penaltyTaker: BoolFilter
  player: PlayerRelationFilter
  playerId: IntFilter
  playerId_teamId: PlayersTeamsPlayerIdTeamIdCompoundUniqueInput
  rightCkTaker: BoolFilter
  shortFkTaker: BoolFilter
  starter: BoolFilter
  team: TeamRelationFilter
  teamId: IntFilter
  teamId_number: PlayersTeamsTeamIdNumberCompoundUniqueInput
}

type Position {
  _count: PositionCount
  description: String!
  id: ID!
  name: String!
  playersPositions(cursor: PlayersPositionsWhereUniqueInput, distinct: [PlayersPositionsScalarFieldEnum!], orderBy: [PlayersPositionsOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersPositionsWhereInput): [PlayersPositions!]!
  positionCategory: PositionCategory!
  positionCategoryId: Int!
  short: String!
}

type PositionAvgAggregate {
  id: Float
  positionCategoryId: Float
}

input PositionAvgOrderByAggregateInput {
  id: SortOrder
  positionCategoryId: SortOrder
}

type PositionCategory {
  _count: PositionCategoryCount
  id: ID!
  name: String!
  positions(cursor: PositionWhereUniqueInput, distinct: [PositionScalarFieldEnum!], orderBy: [PositionOrderByWithRelationInput!], skip: Int, take: Int, where: PositionWhereInput): [Position!]!
  short: String!
}

type PositionCategoryAvgAggregate {
  id: Float
}

input PositionCategoryAvgOrderByAggregateInput {
  id: SortOrder
}

type PositionCategoryCount {
  positions(where: PositionWhereInput): Int!
}

type PositionCategoryCountAggregate {
  _all: Int!
  id: Int!
  name: Int!
  short: Int!
}

input PositionCategoryCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  short: SortOrder
}

type PositionCategoryGroupBy {
  _avg: PositionCategoryAvgAggregate
  _count: PositionCategoryCountAggregate
  _max: PositionCategoryMaxAggregate
  _min: PositionCategoryMinAggregate
  _sum: PositionCategorySumAggregate
  id: Int!
  name: String!
  short: String!
}

type PositionCategoryMaxAggregate {
  id: Int
  name: String
  short: String
}

input PositionCategoryMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  short: SortOrder
}

type PositionCategoryMinAggregate {
  id: Int
  name: String
  short: String
}

input PositionCategoryMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  short: SortOrder
}

input PositionCategoryOrderByWithAggregationInput {
  _avg: PositionCategoryAvgOrderByAggregateInput
  _count: PositionCategoryCountOrderByAggregateInput
  _max: PositionCategoryMaxOrderByAggregateInput
  _min: PositionCategoryMinOrderByAggregateInput
  _sum: PositionCategorySumOrderByAggregateInput
  id: SortOrder
  name: SortOrder
  short: SortOrder
}

input PositionCategoryOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  positions: PositionOrderByRelationAggregateInput
  short: SortOrder
}

input PositionCategoryRelationFilter {
  is: PositionCategoryWhereInput
  isNot: PositionCategoryWhereInput
}

enum PositionCategoryScalarFieldEnum {
  id
  name
  short
}

input PositionCategoryScalarWhereWithAggregatesInput {
  AND: [PositionCategoryScalarWhereWithAggregatesInput!]
  NOT: [PositionCategoryScalarWhereWithAggregatesInput!]
  OR: [PositionCategoryScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  short: StringWithAggregatesFilter
}

type PositionCategorySumAggregate {
  id: Int
}

input PositionCategorySumOrderByAggregateInput {
  id: SortOrder
}

input PositionCategoryWhereInput {
  AND: [PositionCategoryWhereInput!]
  NOT: [PositionCategoryWhereInput!]
  OR: [PositionCategoryWhereInput!]
  id: IntFilter
  name: StringFilter
  positions: PositionListRelationFilter
  short: StringFilter
}

input PositionCategoryWhereUniqueInput {
  AND: [PositionCategoryWhereInput!]
  NOT: [PositionCategoryWhereInput!]
  OR: [PositionCategoryWhereInput!]
  id: Int
  name: StringFilter
  positions: PositionListRelationFilter
  short: StringFilter
}

type PositionCount {
  playersPositions(where: PlayersPositionsWhereInput): Int!
}

type PositionCountAggregate {
  _all: Int!
  description: Int!
  id: Int!
  name: Int!
  positionCategoryId: Int!
  short: Int!
}

input PositionCountOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
  positionCategoryId: SortOrder
  short: SortOrder
}

type PositionGroupBy {
  _avg: PositionAvgAggregate
  _count: PositionCountAggregate
  _max: PositionMaxAggregate
  _min: PositionMinAggregate
  _sum: PositionSumAggregate
  description: String!
  id: Int!
  name: String!
  positionCategoryId: Int!
  short: String!
}

input PositionListRelationFilter {
  every: PositionWhereInput
  none: PositionWhereInput
  some: PositionWhereInput
}

type PositionMaxAggregate {
  description: String
  id: Int
  name: String
  positionCategoryId: Int
  short: String
}

input PositionMaxOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
  positionCategoryId: SortOrder
  short: SortOrder
}

type PositionMinAggregate {
  description: String
  id: Int
  name: String
  positionCategoryId: Int
  short: String
}

input PositionMinOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
  positionCategoryId: SortOrder
  short: SortOrder
}

input PositionOrderByRelationAggregateInput {
  _count: SortOrder
}

input PositionOrderByWithAggregationInput {
  _avg: PositionAvgOrderByAggregateInput
  _count: PositionCountOrderByAggregateInput
  _max: PositionMaxOrderByAggregateInput
  _min: PositionMinOrderByAggregateInput
  _sum: PositionSumOrderByAggregateInput
  description: SortOrder
  id: SortOrder
  name: SortOrder
  positionCategoryId: SortOrder
  short: SortOrder
}

input PositionOrderByWithRelationInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
  playersPositions: PlayersPositionsOrderByRelationAggregateInput
  positionCategory: PositionCategoryOrderByWithRelationInput
  positionCategoryId: SortOrder
  short: SortOrder
}

input PositionRelationFilter {
  is: PositionWhereInput
  isNot: PositionWhereInput
}

enum PositionScalarFieldEnum {
  description
  id
  name
  positionCategoryId
  short
}

input PositionScalarWhereWithAggregatesInput {
  AND: [PositionScalarWhereWithAggregatesInput!]
  NOT: [PositionScalarWhereWithAggregatesInput!]
  OR: [PositionScalarWhereWithAggregatesInput!]
  description: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  positionCategoryId: IntWithAggregatesFilter
  short: StringWithAggregatesFilter
}

type PositionSumAggregate {
  id: Int
  positionCategoryId: Int
}

input PositionSumOrderByAggregateInput {
  id: SortOrder
  positionCategoryId: SortOrder
}

input PositionWhereInput {
  AND: [PositionWhereInput!]
  NOT: [PositionWhereInput!]
  OR: [PositionWhereInput!]
  description: StringFilter
  id: IntFilter
  name: StringFilter
  playersPositions: PlayersPositionsListRelationFilter
  positionCategory: PositionCategoryRelationFilter
  positionCategoryId: IntFilter
  short: StringFilter
}

input PositionWhereUniqueInput {
  AND: [PositionWhereInput!]
  NOT: [PositionWhereInput!]
  OR: [PositionWhereInput!]
  description: StringFilter
  id: Int
  name: StringFilter
  playersPositions: PlayersPositionsListRelationFilter
  positionCategory: PositionCategoryRelationFilter
  positionCategoryId: IntFilter
  short: StringFilter
}

type Query {
  abilities(cursor: AbilityWhereUniqueInput, distinct: [AbilityScalarFieldEnum!], orderBy: [AbilityOrderByWithRelationInput!], skip: Int, take: Int, where: AbilityWhereInput): [Ability!]!
  ability(where: AbilityWhereUniqueInput!): Ability
  aggregateAbility(cursor: AbilityWhereUniqueInput, orderBy: [AbilityOrderByWithRelationInput!], skip: Int, take: Int, where: AbilityWhereInput): AggregateAbility!
  aggregateAppearance(cursor: AppearanceWhereUniqueInput, orderBy: [AppearanceOrderByWithRelationInput!], skip: Int, take: Int, where: AppearanceWhereInput): AggregateAppearance!
  aggregateAppearanceValue(cursor: AppearanceValueWhereUniqueInput, orderBy: [AppearanceValueOrderByWithRelationInput!], skip: Int, take: Int, where: AppearanceValueWhereInput): AggregateAppearanceValue!
  aggregateFormation(cursor: FormationWhereUniqueInput, orderBy: [FormationOrderByWithRelationInput!], skip: Int, take: Int, where: FormationWhereInput): AggregateFormation!
  aggregateLeague(cursor: LeagueWhereUniqueInput, orderBy: [LeagueOrderByWithRelationInput!], skip: Int, take: Int, where: LeagueWhereInput): AggregateLeague!
  aggregateLeagueCategory(cursor: LeagueCategoryWhereUniqueInput, orderBy: [LeagueCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: LeagueCategoryWhereInput): AggregateLeagueCategory!
  aggregateNationality(cursor: NationalityWhereUniqueInput, orderBy: [NationalityOrderByWithRelationInput!], skip: Int, take: Int, where: NationalityWhereInput): AggregateNationality!
  aggregatePlayer(cursor: PlayerWhereUniqueInput, orderBy: [PlayerOrderByWithRelationInput!], skip: Int, take: Int, where: PlayerWhereInput): AggregatePlayer!
  aggregatePlayersAbilities(cursor: PlayersAbilitiesWhereUniqueInput, orderBy: [PlayersAbilitiesOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersAbilitiesWhereInput): AggregatePlayersAbilities!
  aggregatePlayersAppearances(cursor: PlayersAppearancesWhereUniqueInput, orderBy: [PlayersAppearancesOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersAppearancesWhereInput): AggregatePlayersAppearances!
  aggregatePlayersPositions(cursor: PlayersPositionsWhereUniqueInput, orderBy: [PlayersPositionsOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersPositionsWhereInput): AggregatePlayersPositions!
  aggregatePlayersSettings(cursor: PlayersSettingsWhereUniqueInput, orderBy: [PlayersSettingsOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersSettingsWhereInput): AggregatePlayersSettings!
  aggregatePlayersSpecialAbilities(cursor: PlayersSpecialAbilitiesWhereUniqueInput, orderBy: [PlayersSpecialAbilitiesOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersSpecialAbilitiesWhereInput): AggregatePlayersSpecialAbilities!
  aggregatePlayersTeams(cursor: PlayersTeamsWhereUniqueInput, orderBy: [PlayersTeamsOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersTeamsWhereInput): AggregatePlayersTeams!
  aggregatePosition(cursor: PositionWhereUniqueInput, orderBy: [PositionOrderByWithRelationInput!], skip: Int, take: Int, where: PositionWhereInput): AggregatePosition!
  aggregatePositionCategory(cursor: PositionCategoryWhereUniqueInput, orderBy: [PositionCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: PositionCategoryWhereInput): AggregatePositionCategory!
  aggregateSetting(cursor: SettingWhereUniqueInput, orderBy: [SettingOrderByWithRelationInput!], skip: Int, take: Int, where: SettingWhereInput): AggregateSetting!
  aggregateSettingValue(cursor: SettingValueWhereUniqueInput, orderBy: [SettingValueOrderByWithRelationInput!], skip: Int, take: Int, where: SettingValueWhereInput): AggregateSettingValue!
  aggregateSpecialAbility(cursor: SpecialAbilityWhereUniqueInput, orderBy: [SpecialAbilityOrderByWithRelationInput!], skip: Int, take: Int, where: SpecialAbilityWhereInput): AggregateSpecialAbility!
  aggregateStadium(cursor: StadiumWhereUniqueInput, orderBy: [StadiumOrderByWithRelationInput!], skip: Int, take: Int, where: StadiumWhereInput): AggregateStadium!
  aggregateStadiumArea(cursor: StadiumAreaWhereUniqueInput, orderBy: [StadiumAreaOrderByWithRelationInput!], skip: Int, take: Int, where: StadiumAreaWhereInput): AggregateStadiumArea!
  aggregateTeam(cursor: TeamWhereUniqueInput, orderBy: [TeamOrderByWithRelationInput!], skip: Int, take: Int, where: TeamWhereInput): AggregateTeam!
  appearance(where: AppearanceWhereUniqueInput!): Appearance
  appearanceValue(where: AppearanceValueWhereUniqueInput!): AppearanceValue
  appearanceValues(cursor: AppearanceValueWhereUniqueInput, distinct: [AppearanceValueScalarFieldEnum!], orderBy: [AppearanceValueOrderByWithRelationInput!], skip: Int, take: Int, where: AppearanceValueWhereInput): [AppearanceValue!]!
  appearances(cursor: AppearanceWhereUniqueInput, distinct: [AppearanceScalarFieldEnum!], orderBy: [AppearanceOrderByWithRelationInput!], skip: Int, take: Int, where: AppearanceWhereInput): [Appearance!]!
  findFirstAbility(cursor: AbilityWhereUniqueInput, distinct: [AbilityScalarFieldEnum!], orderBy: [AbilityOrderByWithRelationInput!], skip: Int, take: Int, where: AbilityWhereInput): Ability
  findFirstAbilityOrThrow(cursor: AbilityWhereUniqueInput, distinct: [AbilityScalarFieldEnum!], orderBy: [AbilityOrderByWithRelationInput!], skip: Int, take: Int, where: AbilityWhereInput): Ability
  findFirstAppearance(cursor: AppearanceWhereUniqueInput, distinct: [AppearanceScalarFieldEnum!], orderBy: [AppearanceOrderByWithRelationInput!], skip: Int, take: Int, where: AppearanceWhereInput): Appearance
  findFirstAppearanceOrThrow(cursor: AppearanceWhereUniqueInput, distinct: [AppearanceScalarFieldEnum!], orderBy: [AppearanceOrderByWithRelationInput!], skip: Int, take: Int, where: AppearanceWhereInput): Appearance
  findFirstAppearanceValue(cursor: AppearanceValueWhereUniqueInput, distinct: [AppearanceValueScalarFieldEnum!], orderBy: [AppearanceValueOrderByWithRelationInput!], skip: Int, take: Int, where: AppearanceValueWhereInput): AppearanceValue
  findFirstAppearanceValueOrThrow(cursor: AppearanceValueWhereUniqueInput, distinct: [AppearanceValueScalarFieldEnum!], orderBy: [AppearanceValueOrderByWithRelationInput!], skip: Int, take: Int, where: AppearanceValueWhereInput): AppearanceValue
  findFirstFormation(cursor: FormationWhereUniqueInput, distinct: [FormationScalarFieldEnum!], orderBy: [FormationOrderByWithRelationInput!], skip: Int, take: Int, where: FormationWhereInput): Formation
  findFirstFormationOrThrow(cursor: FormationWhereUniqueInput, distinct: [FormationScalarFieldEnum!], orderBy: [FormationOrderByWithRelationInput!], skip: Int, take: Int, where: FormationWhereInput): Formation
  findFirstLeague(cursor: LeagueWhereUniqueInput, distinct: [LeagueScalarFieldEnum!], orderBy: [LeagueOrderByWithRelationInput!], skip: Int, take: Int, where: LeagueWhereInput): League
  findFirstLeagueCategory(cursor: LeagueCategoryWhereUniqueInput, distinct: [LeagueCategoryScalarFieldEnum!], orderBy: [LeagueCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: LeagueCategoryWhereInput): LeagueCategory
  findFirstLeagueCategoryOrThrow(cursor: LeagueCategoryWhereUniqueInput, distinct: [LeagueCategoryScalarFieldEnum!], orderBy: [LeagueCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: LeagueCategoryWhereInput): LeagueCategory
  findFirstLeagueOrThrow(cursor: LeagueWhereUniqueInput, distinct: [LeagueScalarFieldEnum!], orderBy: [LeagueOrderByWithRelationInput!], skip: Int, take: Int, where: LeagueWhereInput): League
  findFirstNationality(cursor: NationalityWhereUniqueInput, distinct: [NationalityScalarFieldEnum!], orderBy: [NationalityOrderByWithRelationInput!], skip: Int, take: Int, where: NationalityWhereInput): Nationality
  findFirstNationalityOrThrow(cursor: NationalityWhereUniqueInput, distinct: [NationalityScalarFieldEnum!], orderBy: [NationalityOrderByWithRelationInput!], skip: Int, take: Int, where: NationalityWhereInput): Nationality
  findFirstPlayer(cursor: PlayerWhereUniqueInput, distinct: [PlayerScalarFieldEnum!], orderBy: [PlayerOrderByWithRelationInput!], skip: Int, take: Int, where: PlayerWhereInput): Player
  findFirstPlayerOrThrow(cursor: PlayerWhereUniqueInput, distinct: [PlayerScalarFieldEnum!], orderBy: [PlayerOrderByWithRelationInput!], skip: Int, take: Int, where: PlayerWhereInput): Player
  findFirstPlayersAbilities(cursor: PlayersAbilitiesWhereUniqueInput, distinct: [PlayersAbilitiesScalarFieldEnum!], orderBy: [PlayersAbilitiesOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersAbilitiesWhereInput): PlayersAbilities
  findFirstPlayersAbilitiesOrThrow(cursor: PlayersAbilitiesWhereUniqueInput, distinct: [PlayersAbilitiesScalarFieldEnum!], orderBy: [PlayersAbilitiesOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersAbilitiesWhereInput): PlayersAbilities
  findFirstPlayersAppearances(cursor: PlayersAppearancesWhereUniqueInput, distinct: [PlayersAppearancesScalarFieldEnum!], orderBy: [PlayersAppearancesOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersAppearancesWhereInput): PlayersAppearances
  findFirstPlayersAppearancesOrThrow(cursor: PlayersAppearancesWhereUniqueInput, distinct: [PlayersAppearancesScalarFieldEnum!], orderBy: [PlayersAppearancesOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersAppearancesWhereInput): PlayersAppearances
  findFirstPlayersPositions(cursor: PlayersPositionsWhereUniqueInput, distinct: [PlayersPositionsScalarFieldEnum!], orderBy: [PlayersPositionsOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersPositionsWhereInput): PlayersPositions
  findFirstPlayersPositionsOrThrow(cursor: PlayersPositionsWhereUniqueInput, distinct: [PlayersPositionsScalarFieldEnum!], orderBy: [PlayersPositionsOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersPositionsWhereInput): PlayersPositions
  findFirstPlayersSettings(cursor: PlayersSettingsWhereUniqueInput, distinct: [PlayersSettingsScalarFieldEnum!], orderBy: [PlayersSettingsOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersSettingsWhereInput): PlayersSettings
  findFirstPlayersSettingsOrThrow(cursor: PlayersSettingsWhereUniqueInput, distinct: [PlayersSettingsScalarFieldEnum!], orderBy: [PlayersSettingsOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersSettingsWhereInput): PlayersSettings
  findFirstPlayersSpecialAbilities(cursor: PlayersSpecialAbilitiesWhereUniqueInput, distinct: [PlayersSpecialAbilitiesScalarFieldEnum!], orderBy: [PlayersSpecialAbilitiesOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersSpecialAbilitiesWhereInput): PlayersSpecialAbilities
  findFirstPlayersSpecialAbilitiesOrThrow(cursor: PlayersSpecialAbilitiesWhereUniqueInput, distinct: [PlayersSpecialAbilitiesScalarFieldEnum!], orderBy: [PlayersSpecialAbilitiesOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersSpecialAbilitiesWhereInput): PlayersSpecialAbilities
  findFirstPlayersTeams(cursor: PlayersTeamsWhereUniqueInput, distinct: [PlayersTeamsScalarFieldEnum!], orderBy: [PlayersTeamsOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersTeamsWhereInput): PlayersTeams
  findFirstPlayersTeamsOrThrow(cursor: PlayersTeamsWhereUniqueInput, distinct: [PlayersTeamsScalarFieldEnum!], orderBy: [PlayersTeamsOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersTeamsWhereInput): PlayersTeams
  findFirstPosition(cursor: PositionWhereUniqueInput, distinct: [PositionScalarFieldEnum!], orderBy: [PositionOrderByWithRelationInput!], skip: Int, take: Int, where: PositionWhereInput): Position
  findFirstPositionCategory(cursor: PositionCategoryWhereUniqueInput, distinct: [PositionCategoryScalarFieldEnum!], orderBy: [PositionCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: PositionCategoryWhereInput): PositionCategory
  findFirstPositionCategoryOrThrow(cursor: PositionCategoryWhereUniqueInput, distinct: [PositionCategoryScalarFieldEnum!], orderBy: [PositionCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: PositionCategoryWhereInput): PositionCategory
  findFirstPositionOrThrow(cursor: PositionWhereUniqueInput, distinct: [PositionScalarFieldEnum!], orderBy: [PositionOrderByWithRelationInput!], skip: Int, take: Int, where: PositionWhereInput): Position
  findFirstSetting(cursor: SettingWhereUniqueInput, distinct: [SettingScalarFieldEnum!], orderBy: [SettingOrderByWithRelationInput!], skip: Int, take: Int, where: SettingWhereInput): Setting
  findFirstSettingOrThrow(cursor: SettingWhereUniqueInput, distinct: [SettingScalarFieldEnum!], orderBy: [SettingOrderByWithRelationInput!], skip: Int, take: Int, where: SettingWhereInput): Setting
  findFirstSettingValue(cursor: SettingValueWhereUniqueInput, distinct: [SettingValueScalarFieldEnum!], orderBy: [SettingValueOrderByWithRelationInput!], skip: Int, take: Int, where: SettingValueWhereInput): SettingValue
  findFirstSettingValueOrThrow(cursor: SettingValueWhereUniqueInput, distinct: [SettingValueScalarFieldEnum!], orderBy: [SettingValueOrderByWithRelationInput!], skip: Int, take: Int, where: SettingValueWhereInput): SettingValue
  findFirstSpecialAbility(cursor: SpecialAbilityWhereUniqueInput, distinct: [SpecialAbilityScalarFieldEnum!], orderBy: [SpecialAbilityOrderByWithRelationInput!], skip: Int, take: Int, where: SpecialAbilityWhereInput): SpecialAbility
  findFirstSpecialAbilityOrThrow(cursor: SpecialAbilityWhereUniqueInput, distinct: [SpecialAbilityScalarFieldEnum!], orderBy: [SpecialAbilityOrderByWithRelationInput!], skip: Int, take: Int, where: SpecialAbilityWhereInput): SpecialAbility
  findFirstStadium(cursor: StadiumWhereUniqueInput, distinct: [StadiumScalarFieldEnum!], orderBy: [StadiumOrderByWithRelationInput!], skip: Int, take: Int, where: StadiumWhereInput): Stadium
  findFirstStadiumArea(cursor: StadiumAreaWhereUniqueInput, distinct: [StadiumAreaScalarFieldEnum!], orderBy: [StadiumAreaOrderByWithRelationInput!], skip: Int, take: Int, where: StadiumAreaWhereInput): StadiumArea
  findFirstStadiumAreaOrThrow(cursor: StadiumAreaWhereUniqueInput, distinct: [StadiumAreaScalarFieldEnum!], orderBy: [StadiumAreaOrderByWithRelationInput!], skip: Int, take: Int, where: StadiumAreaWhereInput): StadiumArea
  findFirstStadiumOrThrow(cursor: StadiumWhereUniqueInput, distinct: [StadiumScalarFieldEnum!], orderBy: [StadiumOrderByWithRelationInput!], skip: Int, take: Int, where: StadiumWhereInput): Stadium
  findFirstTeam(cursor: TeamWhereUniqueInput, distinct: [TeamScalarFieldEnum!], orderBy: [TeamOrderByWithRelationInput!], skip: Int, take: Int, where: TeamWhereInput): Team
  findFirstTeamOrThrow(cursor: TeamWhereUniqueInput, distinct: [TeamScalarFieldEnum!], orderBy: [TeamOrderByWithRelationInput!], skip: Int, take: Int, where: TeamWhereInput): Team
  findManyPlayersAbilities(cursor: PlayersAbilitiesWhereUniqueInput, distinct: [PlayersAbilitiesScalarFieldEnum!], orderBy: [PlayersAbilitiesOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersAbilitiesWhereInput): [PlayersAbilities!]!
  findManyPlayersAppearances(cursor: PlayersAppearancesWhereUniqueInput, distinct: [PlayersAppearancesScalarFieldEnum!], orderBy: [PlayersAppearancesOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersAppearancesWhereInput): [PlayersAppearances!]!
  findManyPlayersPositions(cursor: PlayersPositionsWhereUniqueInput, distinct: [PlayersPositionsScalarFieldEnum!], orderBy: [PlayersPositionsOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersPositionsWhereInput): [PlayersPositions!]!
  findManyPlayersSettings(cursor: PlayersSettingsWhereUniqueInput, distinct: [PlayersSettingsScalarFieldEnum!], orderBy: [PlayersSettingsOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersSettingsWhereInput): [PlayersSettings!]!
  findManyPlayersSpecialAbilities(cursor: PlayersSpecialAbilitiesWhereUniqueInput, distinct: [PlayersSpecialAbilitiesScalarFieldEnum!], orderBy: [PlayersSpecialAbilitiesOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersSpecialAbilitiesWhereInput): [PlayersSpecialAbilities!]!
  findManyPlayersTeams(cursor: PlayersTeamsWhereUniqueInput, distinct: [PlayersTeamsScalarFieldEnum!], orderBy: [PlayersTeamsOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersTeamsWhereInput): [PlayersTeams!]!
  findUniquePlayersAbilities(where: PlayersAbilitiesWhereUniqueInput!): PlayersAbilities
  findUniquePlayersAbilitiesOrThrow(where: PlayersAbilitiesWhereUniqueInput!): PlayersAbilities
  findUniquePlayersAppearances(where: PlayersAppearancesWhereUniqueInput!): PlayersAppearances
  findUniquePlayersAppearancesOrThrow(where: PlayersAppearancesWhereUniqueInput!): PlayersAppearances
  findUniquePlayersPositions(where: PlayersPositionsWhereUniqueInput!): PlayersPositions
  findUniquePlayersPositionsOrThrow(where: PlayersPositionsWhereUniqueInput!): PlayersPositions
  findUniquePlayersSettings(where: PlayersSettingsWhereUniqueInput!): PlayersSettings
  findUniquePlayersSettingsOrThrow(where: PlayersSettingsWhereUniqueInput!): PlayersSettings
  findUniquePlayersSpecialAbilities(where: PlayersSpecialAbilitiesWhereUniqueInput!): PlayersSpecialAbilities
  findUniquePlayersSpecialAbilitiesOrThrow(where: PlayersSpecialAbilitiesWhereUniqueInput!): PlayersSpecialAbilities
  findUniquePlayersTeams(where: PlayersTeamsWhereUniqueInput!): PlayersTeams
  findUniquePlayersTeamsOrThrow(where: PlayersTeamsWhereUniqueInput!): PlayersTeams
  formation(where: FormationWhereUniqueInput!): Formation
  formations(cursor: FormationWhereUniqueInput, distinct: [FormationScalarFieldEnum!], orderBy: [FormationOrderByWithRelationInput!], skip: Int, take: Int, where: FormationWhereInput): [Formation!]!
  getAbility(where: AbilityWhereUniqueInput!): Ability
  getAppearance(where: AppearanceWhereUniqueInput!): Appearance
  getAppearanceValue(where: AppearanceValueWhereUniqueInput!): AppearanceValue
  getFormation(where: FormationWhereUniqueInput!): Formation
  getLeague(where: LeagueWhereUniqueInput!): League
  getLeagueCategory(where: LeagueCategoryWhereUniqueInput!): LeagueCategory
  getNationality(where: NationalityWhereUniqueInput!): Nationality
  getPlayer(where: PlayerWhereUniqueInput!): Player
  getPosition(where: PositionWhereUniqueInput!): Position
  getPositionCategory(where: PositionCategoryWhereUniqueInput!): PositionCategory
  getSetting(where: SettingWhereUniqueInput!): Setting
  getSettingValue(where: SettingValueWhereUniqueInput!): SettingValue
  getSpecialAbility(where: SpecialAbilityWhereUniqueInput!): SpecialAbility
  getStadium(where: StadiumWhereUniqueInput!): Stadium
  getStadiumArea(where: StadiumAreaWhereUniqueInput!): StadiumArea
  getTeam(where: TeamWhereUniqueInput!): Team
  groupByAbility(by: [AbilityScalarFieldEnum!]!, having: AbilityScalarWhereWithAggregatesInput, orderBy: [AbilityOrderByWithAggregationInput!], skip: Int, take: Int, where: AbilityWhereInput): [AbilityGroupBy!]!
  groupByAppearance(by: [AppearanceScalarFieldEnum!]!, having: AppearanceScalarWhereWithAggregatesInput, orderBy: [AppearanceOrderByWithAggregationInput!], skip: Int, take: Int, where: AppearanceWhereInput): [AppearanceGroupBy!]!
  groupByAppearanceValue(by: [AppearanceValueScalarFieldEnum!]!, having: AppearanceValueScalarWhereWithAggregatesInput, orderBy: [AppearanceValueOrderByWithAggregationInput!], skip: Int, take: Int, where: AppearanceValueWhereInput): [AppearanceValueGroupBy!]!
  groupByFormation(by: [FormationScalarFieldEnum!]!, having: FormationScalarWhereWithAggregatesInput, orderBy: [FormationOrderByWithAggregationInput!], skip: Int, take: Int, where: FormationWhereInput): [FormationGroupBy!]!
  groupByLeague(by: [LeagueScalarFieldEnum!]!, having: LeagueScalarWhereWithAggregatesInput, orderBy: [LeagueOrderByWithAggregationInput!], skip: Int, take: Int, where: LeagueWhereInput): [LeagueGroupBy!]!
  groupByLeagueCategory(by: [LeagueCategoryScalarFieldEnum!]!, having: LeagueCategoryScalarWhereWithAggregatesInput, orderBy: [LeagueCategoryOrderByWithAggregationInput!], skip: Int, take: Int, where: LeagueCategoryWhereInput): [LeagueCategoryGroupBy!]!
  groupByNationality(by: [NationalityScalarFieldEnum!]!, having: NationalityScalarWhereWithAggregatesInput, orderBy: [NationalityOrderByWithAggregationInput!], skip: Int, take: Int, where: NationalityWhereInput): [NationalityGroupBy!]!
  groupByPlayer(by: [PlayerScalarFieldEnum!]!, having: PlayerScalarWhereWithAggregatesInput, orderBy: [PlayerOrderByWithAggregationInput!], skip: Int, take: Int, where: PlayerWhereInput): [PlayerGroupBy!]!
  groupByPlayersAbilities(by: [PlayersAbilitiesScalarFieldEnum!]!, having: PlayersAbilitiesScalarWhereWithAggregatesInput, orderBy: [PlayersAbilitiesOrderByWithAggregationInput!], skip: Int, take: Int, where: PlayersAbilitiesWhereInput): [PlayersAbilitiesGroupBy!]!
  groupByPlayersAppearances(by: [PlayersAppearancesScalarFieldEnum!]!, having: PlayersAppearancesScalarWhereWithAggregatesInput, orderBy: [PlayersAppearancesOrderByWithAggregationInput!], skip: Int, take: Int, where: PlayersAppearancesWhereInput): [PlayersAppearancesGroupBy!]!
  groupByPlayersPositions(by: [PlayersPositionsScalarFieldEnum!]!, having: PlayersPositionsScalarWhereWithAggregatesInput, orderBy: [PlayersPositionsOrderByWithAggregationInput!], skip: Int, take: Int, where: PlayersPositionsWhereInput): [PlayersPositionsGroupBy!]!
  groupByPlayersSettings(by: [PlayersSettingsScalarFieldEnum!]!, having: PlayersSettingsScalarWhereWithAggregatesInput, orderBy: [PlayersSettingsOrderByWithAggregationInput!], skip: Int, take: Int, where: PlayersSettingsWhereInput): [PlayersSettingsGroupBy!]!
  groupByPlayersSpecialAbilities(by: [PlayersSpecialAbilitiesScalarFieldEnum!]!, having: PlayersSpecialAbilitiesScalarWhereWithAggregatesInput, orderBy: [PlayersSpecialAbilitiesOrderByWithAggregationInput!], skip: Int, take: Int, where: PlayersSpecialAbilitiesWhereInput): [PlayersSpecialAbilitiesGroupBy!]!
  groupByPlayersTeams(by: [PlayersTeamsScalarFieldEnum!]!, having: PlayersTeamsScalarWhereWithAggregatesInput, orderBy: [PlayersTeamsOrderByWithAggregationInput!], skip: Int, take: Int, where: PlayersTeamsWhereInput): [PlayersTeamsGroupBy!]!
  groupByPosition(by: [PositionScalarFieldEnum!]!, having: PositionScalarWhereWithAggregatesInput, orderBy: [PositionOrderByWithAggregationInput!], skip: Int, take: Int, where: PositionWhereInput): [PositionGroupBy!]!
  groupByPositionCategory(by: [PositionCategoryScalarFieldEnum!]!, having: PositionCategoryScalarWhereWithAggregatesInput, orderBy: [PositionCategoryOrderByWithAggregationInput!], skip: Int, take: Int, where: PositionCategoryWhereInput): [PositionCategoryGroupBy!]!
  groupBySetting(by: [SettingScalarFieldEnum!]!, having: SettingScalarWhereWithAggregatesInput, orderBy: [SettingOrderByWithAggregationInput!], skip: Int, take: Int, where: SettingWhereInput): [SettingGroupBy!]!
  groupBySettingValue(by: [SettingValueScalarFieldEnum!]!, having: SettingValueScalarWhereWithAggregatesInput, orderBy: [SettingValueOrderByWithAggregationInput!], skip: Int, take: Int, where: SettingValueWhereInput): [SettingValueGroupBy!]!
  groupBySpecialAbility(by: [SpecialAbilityScalarFieldEnum!]!, having: SpecialAbilityScalarWhereWithAggregatesInput, orderBy: [SpecialAbilityOrderByWithAggregationInput!], skip: Int, take: Int, where: SpecialAbilityWhereInput): [SpecialAbilityGroupBy!]!
  groupByStadium(by: [StadiumScalarFieldEnum!]!, having: StadiumScalarWhereWithAggregatesInput, orderBy: [StadiumOrderByWithAggregationInput!], skip: Int, take: Int, where: StadiumWhereInput): [StadiumGroupBy!]!
  groupByStadiumArea(by: [StadiumAreaScalarFieldEnum!]!, having: StadiumAreaScalarWhereWithAggregatesInput, orderBy: [StadiumAreaOrderByWithAggregationInput!], skip: Int, take: Int, where: StadiumAreaWhereInput): [StadiumAreaGroupBy!]!
  groupByTeam(by: [TeamScalarFieldEnum!]!, having: TeamScalarWhereWithAggregatesInput, orderBy: [TeamOrderByWithAggregationInput!], skip: Int, take: Int, where: TeamWhereInput): [TeamGroupBy!]!
  league(where: LeagueWhereUniqueInput!): League
  leagueCategories(cursor: LeagueCategoryWhereUniqueInput, distinct: [LeagueCategoryScalarFieldEnum!], orderBy: [LeagueCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: LeagueCategoryWhereInput): [LeagueCategory!]!
  leagueCategory(where: LeagueCategoryWhereUniqueInput!): LeagueCategory
  leagues(cursor: LeagueWhereUniqueInput, distinct: [LeagueScalarFieldEnum!], orderBy: [LeagueOrderByWithRelationInput!], skip: Int, take: Int, where: LeagueWhereInput): [League!]!
  nationalities(cursor: NationalityWhereUniqueInput, distinct: [NationalityScalarFieldEnum!], orderBy: [NationalityOrderByWithRelationInput!], skip: Int, take: Int, where: NationalityWhereInput): [Nationality!]!
  nationality(where: NationalityWhereUniqueInput!): Nationality
  player(where: PlayerWhereUniqueInput!): Player
  players(cursor: PlayerWhereUniqueInput, distinct: [PlayerScalarFieldEnum!], orderBy: [PlayerOrderByWithRelationInput!], skip: Int, take: Int, where: PlayerWhereInput): [Player!]!
  position(where: PositionWhereUniqueInput!): Position
  positionCategories(cursor: PositionCategoryWhereUniqueInput, distinct: [PositionCategoryScalarFieldEnum!], orderBy: [PositionCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: PositionCategoryWhereInput): [PositionCategory!]!
  positionCategory(where: PositionCategoryWhereUniqueInput!): PositionCategory
  positions(cursor: PositionWhereUniqueInput, distinct: [PositionScalarFieldEnum!], orderBy: [PositionOrderByWithRelationInput!], skip: Int, take: Int, where: PositionWhereInput): [Position!]!
  setting(where: SettingWhereUniqueInput!): Setting
  settingValue(where: SettingValueWhereUniqueInput!): SettingValue
  settingValues(cursor: SettingValueWhereUniqueInput, distinct: [SettingValueScalarFieldEnum!], orderBy: [SettingValueOrderByWithRelationInput!], skip: Int, take: Int, where: SettingValueWhereInput): [SettingValue!]!
  settings(cursor: SettingWhereUniqueInput, distinct: [SettingScalarFieldEnum!], orderBy: [SettingOrderByWithRelationInput!], skip: Int, take: Int, where: SettingWhereInput): [Setting!]!
  specialAbilities(cursor: SpecialAbilityWhereUniqueInput, distinct: [SpecialAbilityScalarFieldEnum!], orderBy: [SpecialAbilityOrderByWithRelationInput!], skip: Int, take: Int, where: SpecialAbilityWhereInput): [SpecialAbility!]!
  specialAbility(where: SpecialAbilityWhereUniqueInput!): SpecialAbility
  stadium(where: StadiumWhereUniqueInput!): Stadium
  stadiumArea(where: StadiumAreaWhereUniqueInput!): StadiumArea
  stadiumAreas(cursor: StadiumAreaWhereUniqueInput, distinct: [StadiumAreaScalarFieldEnum!], orderBy: [StadiumAreaOrderByWithRelationInput!], skip: Int, take: Int, where: StadiumAreaWhereInput): [StadiumArea!]!
  stadiums(cursor: StadiumWhereUniqueInput, distinct: [StadiumScalarFieldEnum!], orderBy: [StadiumOrderByWithRelationInput!], skip: Int, take: Int, where: StadiumWhereInput): [Stadium!]!
  team(where: TeamWhereUniqueInput!): Team
  teams(cursor: TeamWhereUniqueInput, distinct: [TeamScalarFieldEnum!], orderBy: [TeamOrderByWithRelationInput!], skip: Int, take: Int, where: TeamWhereInput): [Team!]!
}

type Setting {
  _count: SettingCount
  description: String!
  id: ID!
  max: Int
  min: Int
  name: String!
  playersSettings(cursor: PlayersSettingsWhereUniqueInput, distinct: [PlayersSettingsScalarFieldEnum!], orderBy: [PlayersSettingsOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersSettingsWhereInput): [PlayersSettings!]!
  required: Boolean!
  settingValues(cursor: SettingValueWhereUniqueInput, distinct: [SettingValueScalarFieldEnum!], orderBy: [SettingValueOrderByWithRelationInput!], skip: Int, take: Int, where: SettingValueWhereInput): [SettingValue!]!
}

type SettingAvgAggregate {
  id: Float
  max: Float
  min: Float
}

input SettingAvgOrderByAggregateInput {
  id: SortOrder
  max: SortOrder
  min: SortOrder
}

type SettingCount {
  playersSettings(where: PlayersSettingsWhereInput): Int!
  settingValues(where: SettingValueWhereInput): Int!
}

type SettingCountAggregate {
  _all: Int!
  description: Int!
  id: Int!
  max: Int!
  min: Int!
  name: Int!
  required: Int!
}

input SettingCountOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  max: SortOrder
  min: SortOrder
  name: SortOrder
  required: SortOrder
}

type SettingGroupBy {
  _avg: SettingAvgAggregate
  _count: SettingCountAggregate
  _max: SettingMaxAggregate
  _min: SettingMinAggregate
  _sum: SettingSumAggregate
  description: String!
  id: Int!
  max: Int
  min: Int
  name: String!
  required: Boolean!
}

type SettingMaxAggregate {
  description: String
  id: Int
  max: Int
  min: Int
  name: String
  required: Boolean
}

input SettingMaxOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  max: SortOrder
  min: SortOrder
  name: SortOrder
  required: SortOrder
}

type SettingMinAggregate {
  description: String
  id: Int
  max: Int
  min: Int
  name: String
  required: Boolean
}

input SettingMinOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  max: SortOrder
  min: SortOrder
  name: SortOrder
  required: SortOrder
}

input SettingOrderByWithAggregationInput {
  _avg: SettingAvgOrderByAggregateInput
  _count: SettingCountOrderByAggregateInput
  _max: SettingMaxOrderByAggregateInput
  _min: SettingMinOrderByAggregateInput
  _sum: SettingSumOrderByAggregateInput
  description: SortOrder
  id: SortOrder
  max: SortOrderInput
  min: SortOrderInput
  name: SortOrder
  required: SortOrder
}

input SettingOrderByWithRelationInput {
  description: SortOrder
  id: SortOrder
  max: SortOrderInput
  min: SortOrderInput
  name: SortOrder
  playersSettings: PlayersSettingsOrderByRelationAggregateInput
  required: SortOrder
  settingValues: SettingValueOrderByRelationAggregateInput
}

input SettingRelationFilter {
  is: SettingWhereInput
  isNot: SettingWhereInput
}

enum SettingScalarFieldEnum {
  description
  id
  max
  min
  name
  required
}

input SettingScalarWhereWithAggregatesInput {
  AND: [SettingScalarWhereWithAggregatesInput!]
  NOT: [SettingScalarWhereWithAggregatesInput!]
  OR: [SettingScalarWhereWithAggregatesInput!]
  description: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  max: IntNullableWithAggregatesFilter
  min: IntNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
  required: BoolWithAggregatesFilter
}

type SettingSumAggregate {
  id: Int
  max: Int
  min: Int
}

input SettingSumOrderByAggregateInput {
  id: SortOrder
  max: SortOrder
  min: SortOrder
}

type SettingValue {
  _count: SettingValueCount
  id: ID!
  playersSettings(cursor: PlayersSettingsWhereUniqueInput, distinct: [PlayersSettingsScalarFieldEnum!], orderBy: [PlayersSettingsOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersSettingsWhereInput): [PlayersSettings!]!
  setting: Setting!
  settingId: Int!
  value: String!
}

type SettingValueAvgAggregate {
  id: Float
  settingId: Float
}

input SettingValueAvgOrderByAggregateInput {
  id: SortOrder
  settingId: SortOrder
}

type SettingValueCount {
  playersSettings(where: PlayersSettingsWhereInput): Int!
}

type SettingValueCountAggregate {
  _all: Int!
  id: Int!
  settingId: Int!
  value: Int!
}

input SettingValueCountOrderByAggregateInput {
  id: SortOrder
  settingId: SortOrder
  value: SortOrder
}

type SettingValueGroupBy {
  _avg: SettingValueAvgAggregate
  _count: SettingValueCountAggregate
  _max: SettingValueMaxAggregate
  _min: SettingValueMinAggregate
  _sum: SettingValueSumAggregate
  id: Int!
  settingId: Int!
  value: String!
}

input SettingValueListRelationFilter {
  every: SettingValueWhereInput
  none: SettingValueWhereInput
  some: SettingValueWhereInput
}

type SettingValueMaxAggregate {
  id: Int
  settingId: Int
  value: String
}

input SettingValueMaxOrderByAggregateInput {
  id: SortOrder
  settingId: SortOrder
  value: SortOrder
}

type SettingValueMinAggregate {
  id: Int
  settingId: Int
  value: String
}

input SettingValueMinOrderByAggregateInput {
  id: SortOrder
  settingId: SortOrder
  value: SortOrder
}

input SettingValueNullableRelationFilter {
  is: SettingValueWhereInput
  isNot: SettingValueWhereInput
}

input SettingValueOrderByRelationAggregateInput {
  _count: SortOrder
}

input SettingValueOrderByWithAggregationInput {
  _avg: SettingValueAvgOrderByAggregateInput
  _count: SettingValueCountOrderByAggregateInput
  _max: SettingValueMaxOrderByAggregateInput
  _min: SettingValueMinOrderByAggregateInput
  _sum: SettingValueSumOrderByAggregateInput
  id: SortOrder
  settingId: SortOrder
  value: SortOrder
}

input SettingValueOrderByWithRelationInput {
  id: SortOrder
  playersSettings: PlayersSettingsOrderByRelationAggregateInput
  setting: SettingOrderByWithRelationInput
  settingId: SortOrder
  value: SortOrder
}

enum SettingValueScalarFieldEnum {
  id
  settingId
  value
}

input SettingValueScalarWhereWithAggregatesInput {
  AND: [SettingValueScalarWhereWithAggregatesInput!]
  NOT: [SettingValueScalarWhereWithAggregatesInput!]
  OR: [SettingValueScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  settingId: IntWithAggregatesFilter
  value: StringWithAggregatesFilter
}

type SettingValueSumAggregate {
  id: Int
  settingId: Int
}

input SettingValueSumOrderByAggregateInput {
  id: SortOrder
  settingId: SortOrder
}

input SettingValueWhereInput {
  AND: [SettingValueWhereInput!]
  NOT: [SettingValueWhereInput!]
  OR: [SettingValueWhereInput!]
  id: IntFilter
  playersSettings: PlayersSettingsListRelationFilter
  setting: SettingRelationFilter
  settingId: IntFilter
  value: StringFilter
}

input SettingValueWhereUniqueInput {
  AND: [SettingValueWhereInput!]
  NOT: [SettingValueWhereInput!]
  OR: [SettingValueWhereInput!]
  id: Int
  playersSettings: PlayersSettingsListRelationFilter
  setting: SettingRelationFilter
  settingId: IntFilter
  value: StringFilter
}

input SettingWhereInput {
  AND: [SettingWhereInput!]
  NOT: [SettingWhereInput!]
  OR: [SettingWhereInput!]
  description: StringFilter
  id: IntFilter
  max: IntNullableFilter
  min: IntNullableFilter
  name: StringFilter
  playersSettings: PlayersSettingsListRelationFilter
  required: BoolFilter
  settingValues: SettingValueListRelationFilter
}

input SettingWhereUniqueInput {
  AND: [SettingWhereInput!]
  NOT: [SettingWhereInput!]
  OR: [SettingWhereInput!]
  description: StringFilter
  id: Int
  max: IntNullableFilter
  min: IntNullableFilter
  name: StringFilter
  playersSettings: PlayersSettingsListRelationFilter
  required: BoolFilter
  settingValues: SettingValueListRelationFilter
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

type SpecialAbility {
  _count: SpecialAbilityCount
  description: String!
  id: ID!
  name: String!
  playersSpecialAbilities(cursor: PlayersSpecialAbilitiesWhereUniqueInput, distinct: [PlayersSpecialAbilitiesScalarFieldEnum!], orderBy: [PlayersSpecialAbilitiesOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersSpecialAbilitiesWhereInput): [PlayersSpecialAbilities!]!
}

type SpecialAbilityAvgAggregate {
  id: Float
}

input SpecialAbilityAvgOrderByAggregateInput {
  id: SortOrder
}

type SpecialAbilityCount {
  playersSpecialAbilities(where: PlayersSpecialAbilitiesWhereInput): Int!
}

type SpecialAbilityCountAggregate {
  _all: Int!
  description: Int!
  id: Int!
  name: Int!
}

input SpecialAbilityCountOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
}

type SpecialAbilityGroupBy {
  _avg: SpecialAbilityAvgAggregate
  _count: SpecialAbilityCountAggregate
  _max: SpecialAbilityMaxAggregate
  _min: SpecialAbilityMinAggregate
  _sum: SpecialAbilitySumAggregate
  description: String!
  id: Int!
  name: String!
}

type SpecialAbilityMaxAggregate {
  description: String
  id: Int
  name: String
}

input SpecialAbilityMaxOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
}

type SpecialAbilityMinAggregate {
  description: String
  id: Int
  name: String
}

input SpecialAbilityMinOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
}

input SpecialAbilityOrderByWithAggregationInput {
  _avg: SpecialAbilityAvgOrderByAggregateInput
  _count: SpecialAbilityCountOrderByAggregateInput
  _max: SpecialAbilityMaxOrderByAggregateInput
  _min: SpecialAbilityMinOrderByAggregateInput
  _sum: SpecialAbilitySumOrderByAggregateInput
  description: SortOrder
  id: SortOrder
  name: SortOrder
}

input SpecialAbilityOrderByWithRelationInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
  playersSpecialAbilities: PlayersSpecialAbilitiesOrderByRelationAggregateInput
}

input SpecialAbilityRelationFilter {
  is: SpecialAbilityWhereInput
  isNot: SpecialAbilityWhereInput
}

enum SpecialAbilityScalarFieldEnum {
  description
  id
  name
}

input SpecialAbilityScalarWhereWithAggregatesInput {
  AND: [SpecialAbilityScalarWhereWithAggregatesInput!]
  NOT: [SpecialAbilityScalarWhereWithAggregatesInput!]
  OR: [SpecialAbilityScalarWhereWithAggregatesInput!]
  description: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
}

type SpecialAbilitySumAggregate {
  id: Int
}

input SpecialAbilitySumOrderByAggregateInput {
  id: SortOrder
}

input SpecialAbilityWhereInput {
  AND: [SpecialAbilityWhereInput!]
  NOT: [SpecialAbilityWhereInput!]
  OR: [SpecialAbilityWhereInput!]
  description: StringFilter
  id: IntFilter
  name: StringFilter
  playersSpecialAbilities: PlayersSpecialAbilitiesListRelationFilter
}

input SpecialAbilityWhereUniqueInput {
  AND: [SpecialAbilityWhereInput!]
  NOT: [SpecialAbilityWhereInput!]
  OR: [SpecialAbilityWhereInput!]
  description: StringFilter
  id: Int
  name: StringFilter
  playersSpecialAbilities: PlayersSpecialAbilitiesListRelationFilter
}

type Stadium {
  _count: StadiumCount
  built: DateTimeISO!
  capacity: Int!
  id: ID!
  name: String!
  realName: String
  stadiumArea: StadiumArea!
  stadiumAreaId: Int!
  teams(cursor: TeamWhereUniqueInput, distinct: [TeamScalarFieldEnum!], orderBy: [TeamOrderByWithRelationInput!], skip: Int, take: Int, where: TeamWhereInput): [Team!]!
}

type StadiumArea {
  _count: StadiumAreaCount
  id: ID!
  name: String!
  stadiums(cursor: StadiumWhereUniqueInput, distinct: [StadiumScalarFieldEnum!], orderBy: [StadiumOrderByWithRelationInput!], skip: Int, take: Int, where: StadiumWhereInput): [Stadium!]!
}

type StadiumAreaAvgAggregate {
  id: Float
}

input StadiumAreaAvgOrderByAggregateInput {
  id: SortOrder
}

type StadiumAreaCount {
  stadiums(where: StadiumWhereInput): Int!
}

type StadiumAreaCountAggregate {
  _all: Int!
  id: Int!
  name: Int!
}

input StadiumAreaCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

type StadiumAreaGroupBy {
  _avg: StadiumAreaAvgAggregate
  _count: StadiumAreaCountAggregate
  _max: StadiumAreaMaxAggregate
  _min: StadiumAreaMinAggregate
  _sum: StadiumAreaSumAggregate
  id: Int!
  name: String!
}

type StadiumAreaMaxAggregate {
  id: Int
  name: String
}

input StadiumAreaMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

type StadiumAreaMinAggregate {
  id: Int
  name: String
}

input StadiumAreaMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
}

input StadiumAreaOrderByWithAggregationInput {
  _avg: StadiumAreaAvgOrderByAggregateInput
  _count: StadiumAreaCountOrderByAggregateInput
  _max: StadiumAreaMaxOrderByAggregateInput
  _min: StadiumAreaMinOrderByAggregateInput
  _sum: StadiumAreaSumOrderByAggregateInput
  id: SortOrder
  name: SortOrder
}

input StadiumAreaOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  stadiums: StadiumOrderByRelationAggregateInput
}

input StadiumAreaRelationFilter {
  is: StadiumAreaWhereInput
  isNot: StadiumAreaWhereInput
}

enum StadiumAreaScalarFieldEnum {
  id
  name
}

input StadiumAreaScalarWhereWithAggregatesInput {
  AND: [StadiumAreaScalarWhereWithAggregatesInput!]
  NOT: [StadiumAreaScalarWhereWithAggregatesInput!]
  OR: [StadiumAreaScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
}

type StadiumAreaSumAggregate {
  id: Int
}

input StadiumAreaSumOrderByAggregateInput {
  id: SortOrder
}

input StadiumAreaWhereInput {
  AND: [StadiumAreaWhereInput!]
  NOT: [StadiumAreaWhereInput!]
  OR: [StadiumAreaWhereInput!]
  id: IntFilter
  name: StringFilter
  stadiums: StadiumListRelationFilter
}

input StadiumAreaWhereUniqueInput {
  AND: [StadiumAreaWhereInput!]
  NOT: [StadiumAreaWhereInput!]
  OR: [StadiumAreaWhereInput!]
  id: Int
  name: StringFilter
  stadiums: StadiumListRelationFilter
}

type StadiumAvgAggregate {
  capacity: Float
  id: Float
  stadiumAreaId: Float
}

input StadiumAvgOrderByAggregateInput {
  capacity: SortOrder
  id: SortOrder
  stadiumAreaId: SortOrder
}

type StadiumCount {
  teams(where: TeamWhereInput): Int!
}

type StadiumCountAggregate {
  _all: Int!
  built: Int!
  capacity: Int!
  id: Int!
  name: Int!
  realName: Int!
  stadiumAreaId: Int!
}

input StadiumCountOrderByAggregateInput {
  built: SortOrder
  capacity: SortOrder
  id: SortOrder
  name: SortOrder
  realName: SortOrder
  stadiumAreaId: SortOrder
}

type StadiumGroupBy {
  _avg: StadiumAvgAggregate
  _count: StadiumCountAggregate
  _max: StadiumMaxAggregate
  _min: StadiumMinAggregate
  _sum: StadiumSumAggregate
  built: DateTimeISO!
  capacity: Int!
  id: Int!
  name: String!
  realName: String
  stadiumAreaId: Int!
}

input StadiumListRelationFilter {
  every: StadiumWhereInput
  none: StadiumWhereInput
  some: StadiumWhereInput
}

type StadiumMaxAggregate {
  built: DateTimeISO
  capacity: Int
  id: Int
  name: String
  realName: String
  stadiumAreaId: Int
}

input StadiumMaxOrderByAggregateInput {
  built: SortOrder
  capacity: SortOrder
  id: SortOrder
  name: SortOrder
  realName: SortOrder
  stadiumAreaId: SortOrder
}

type StadiumMinAggregate {
  built: DateTimeISO
  capacity: Int
  id: Int
  name: String
  realName: String
  stadiumAreaId: Int
}

input StadiumMinOrderByAggregateInput {
  built: SortOrder
  capacity: SortOrder
  id: SortOrder
  name: SortOrder
  realName: SortOrder
  stadiumAreaId: SortOrder
}

input StadiumOrderByRelationAggregateInput {
  _count: SortOrder
}

input StadiumOrderByWithAggregationInput {
  _avg: StadiumAvgOrderByAggregateInput
  _count: StadiumCountOrderByAggregateInput
  _max: StadiumMaxOrderByAggregateInput
  _min: StadiumMinOrderByAggregateInput
  _sum: StadiumSumOrderByAggregateInput
  built: SortOrder
  capacity: SortOrder
  id: SortOrder
  name: SortOrder
  realName: SortOrderInput
  stadiumAreaId: SortOrder
}

input StadiumOrderByWithRelationInput {
  built: SortOrder
  capacity: SortOrder
  id: SortOrder
  name: SortOrder
  realName: SortOrderInput
  stadiumArea: StadiumAreaOrderByWithRelationInput
  stadiumAreaId: SortOrder
  teams: TeamOrderByRelationAggregateInput
}

input StadiumRelationFilter {
  is: StadiumWhereInput
  isNot: StadiumWhereInput
}

enum StadiumScalarFieldEnum {
  built
  capacity
  id
  name
  realName
  stadiumAreaId
}

input StadiumScalarWhereWithAggregatesInput {
  AND: [StadiumScalarWhereWithAggregatesInput!]
  NOT: [StadiumScalarWhereWithAggregatesInput!]
  OR: [StadiumScalarWhereWithAggregatesInput!]
  built: DateTimeWithAggregatesFilter
  capacity: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  realName: StringNullableWithAggregatesFilter
  stadiumAreaId: IntWithAggregatesFilter
}

type StadiumSumAggregate {
  capacity: Int
  id: Int
  stadiumAreaId: Int
}

input StadiumSumOrderByAggregateInput {
  capacity: SortOrder
  id: SortOrder
  stadiumAreaId: SortOrder
}

input StadiumWhereInput {
  AND: [StadiumWhereInput!]
  NOT: [StadiumWhereInput!]
  OR: [StadiumWhereInput!]
  built: DateTimeFilter
  capacity: IntFilter
  id: IntFilter
  name: StringFilter
  realName: StringNullableFilter
  stadiumArea: StadiumAreaRelationFilter
  stadiumAreaId: IntFilter
  teams: TeamListRelationFilter
}

input StadiumWhereUniqueInput {
  AND: [StadiumWhereInput!]
  NOT: [StadiumWhereInput!]
  OR: [StadiumWhereInput!]
  built: DateTimeFilter
  capacity: IntFilter
  id: Int
  name: StringFilter
  realName: StringNullableFilter
  stadiumArea: StadiumAreaRelationFilter
  stadiumAreaId: IntFilter
  teams: TeamListRelationFilter
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Team {
  _count: TeamCount
  formation: Formation!
  formationId: Int!
  id: ID!
  league: League!
  leagueId: Int!
  logo: Image
  name: String!
  playersTeams(cursor: PlayersTeamsWhereUniqueInput, distinct: [PlayersTeamsScalarFieldEnum!], orderBy: [PlayersTeamsOrderByWithRelationInput!], skip: Int, take: Int, where: PlayersTeamsWhereInput): [PlayersTeams!]!
  realName: String
  short: String!
  stadium: Stadium!
  stadiumId: Int!
}

type TeamAvgAggregate {
  formationId: Float
  id: Float
  leagueId: Float
  stadiumId: Float
}

input TeamAvgOrderByAggregateInput {
  formationId: SortOrder
  id: SortOrder
  leagueId: SortOrder
  stadiumId: SortOrder
}

type TeamCount {
  playersTeams(where: PlayersTeamsWhereInput): Int!
}

type TeamCountAggregate {
  _all: Int!
  formationId: Int!
  id: Int!
  leagueId: Int!
  name: Int!
  realName: Int!
  short: Int!
  stadiumId: Int!
}

input TeamCountOrderByAggregateInput {
  formationId: SortOrder
  id: SortOrder
  leagueId: SortOrder
  name: SortOrder
  realName: SortOrder
  short: SortOrder
  stadiumId: SortOrder
}

type TeamGroupBy {
  _avg: TeamAvgAggregate
  _count: TeamCountAggregate
  _max: TeamMaxAggregate
  _min: TeamMinAggregate
  _sum: TeamSumAggregate
  formationId: Int!
  id: Int!
  leagueId: Int!
  name: String!
  realName: String
  short: String!
  stadiumId: Int!
}

input TeamListRelationFilter {
  every: TeamWhereInput
  none: TeamWhereInput
  some: TeamWhereInput
}

type TeamMaxAggregate {
  formationId: Int
  id: Int
  leagueId: Int
  name: String
  realName: String
  short: String
  stadiumId: Int
}

input TeamMaxOrderByAggregateInput {
  formationId: SortOrder
  id: SortOrder
  leagueId: SortOrder
  name: SortOrder
  realName: SortOrder
  short: SortOrder
  stadiumId: SortOrder
}

type TeamMinAggregate {
  formationId: Int
  id: Int
  leagueId: Int
  name: String
  realName: String
  short: String
  stadiumId: Int
}

input TeamMinOrderByAggregateInput {
  formationId: SortOrder
  id: SortOrder
  leagueId: SortOrder
  name: SortOrder
  realName: SortOrder
  short: SortOrder
  stadiumId: SortOrder
}

input TeamOrderByRelationAggregateInput {
  _count: SortOrder
}

input TeamOrderByWithAggregationInput {
  _avg: TeamAvgOrderByAggregateInput
  _count: TeamCountOrderByAggregateInput
  _max: TeamMaxOrderByAggregateInput
  _min: TeamMinOrderByAggregateInput
  _sum: TeamSumOrderByAggregateInput
  formationId: SortOrder
  id: SortOrder
  leagueId: SortOrder
  name: SortOrder
  realName: SortOrderInput
  short: SortOrder
  stadiumId: SortOrder
}

input TeamOrderByWithRelationInput {
  formation: FormationOrderByWithRelationInput
  formationId: SortOrder
  id: SortOrder
  league: LeagueOrderByWithRelationInput
  leagueId: SortOrder
  name: SortOrder
  playersTeams: PlayersTeamsOrderByRelationAggregateInput
  realName: SortOrderInput
  short: SortOrder
  stadium: StadiumOrderByWithRelationInput
  stadiumId: SortOrder
}

input TeamRelationFilter {
  is: TeamWhereInput
  isNot: TeamWhereInput
}

enum TeamScalarFieldEnum {
  formationId
  id
  leagueId
  name
  realName
  short
  stadiumId
}

input TeamScalarWhereWithAggregatesInput {
  AND: [TeamScalarWhereWithAggregatesInput!]
  NOT: [TeamScalarWhereWithAggregatesInput!]
  OR: [TeamScalarWhereWithAggregatesInput!]
  formationId: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
  leagueId: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  realName: StringNullableWithAggregatesFilter
  short: StringWithAggregatesFilter
  stadiumId: IntWithAggregatesFilter
}

type TeamSumAggregate {
  formationId: Int
  id: Int
  leagueId: Int
  stadiumId: Int
}

input TeamSumOrderByAggregateInput {
  formationId: SortOrder
  id: SortOrder
  leagueId: SortOrder
  stadiumId: SortOrder
}

input TeamWhereInput {
  AND: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  formation: FormationRelationFilter
  formationId: IntFilter
  id: IntFilter
  league: LeagueRelationFilter
  leagueId: IntFilter
  name: StringFilter
  playersTeams: PlayersTeamsListRelationFilter
  realName: StringNullableFilter
  short: StringFilter
  stadium: StadiumRelationFilter
  stadiumId: IntFilter
}

input TeamWhereUniqueInput {
  AND: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  formation: FormationRelationFilter
  formationId: IntFilter
  id: Int
  league: LeagueRelationFilter
  leagueId: IntFilter
  name: StringFilter
  playersTeams: PlayersTeamsListRelationFilter
  realName: StringNullableFilter
  short: StringFilter
  stadium: StadiumRelationFilter
  stadiumId: IntFilter
}